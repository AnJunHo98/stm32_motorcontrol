
0514all.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007004  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007214  08007214  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800721c  0800721c  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007224  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000fc  08007320  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000019c  080073c0  0002019c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000c5c  20000240  08007460  00020240  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20000e9c  08007460  00020e9c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001808c  00000000  00000000  0002026a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002784  00000000  00000000  000382f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012a8  00000000  00000000  0003aa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011c0  00000000  00000000  0003bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002930a  00000000  00000000  0003cee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000152db  00000000  00000000  000661f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010373c  00000000  00000000  0007b4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0017ec09  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005098  00000000  00000000  0017ec5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000240 	.word	0x20000240
 8000214:	00000000 	.word	0x00000000
 8000218:	080071e4 	.word	0x080071e4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000244 	.word	0x20000244
 8000234:	080071e4 	.word	0x080071e4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	0000      	movs	r0, r0
	...

08000540 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if(mode ==1){
 8000548:	4ba5      	ldr	r3, [pc, #660]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	f040 853e 	bne.w	8000fce <HAL_TIM_PeriodElapsedCallback+0xa8e>

		if(htim == &htim9)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4aa3      	ldr	r2, [pc, #652]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000556:	4293      	cmp	r3, r2
 8000558:	f040 8539 	bne.w	8000fce <HAL_TIM_PeriodElapsedCallback+0xa8e>
		{
	//		cnt++;
	//
			encoder_cnt[0] = TIM1 -> CNT;
 800055c:	4ba2      	ldr	r3, [pc, #648]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800055e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000560:	b29a      	uxth	r2, r3
 8000562:	4ba2      	ldr	r3, [pc, #648]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000564:	801a      	strh	r2, [r3, #0]
			encoder_cnt[1] = TIM2 -> CNT;
 8000566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800056a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056c:	b29a      	uxth	r2, r3
 800056e:	4b9f      	ldr	r3, [pc, #636]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000570:	805a      	strh	r2, [r3, #2]
			encoder_cnt[2] = TIM3 -> CNT;
 8000572:	4b9f      	ldr	r3, [pc, #636]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000576:	b29a      	uxth	r2, r3
 8000578:	4b9c      	ldr	r3, [pc, #624]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800057a:	809a      	strh	r2, [r3, #4]
			encoder_cnt[3] = TIM4 -> CNT;
 800057c:	4b9d      	ldr	r3, [pc, #628]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800057e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000580:	b29a      	uxth	r2, r3
 8000582:	4b9a      	ldr	r3, [pc, #616]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000584:	80da      	strh	r2, [r3, #6]
			encoder_cnt[4] = TIM8 -> CNT;
 8000586:	4b9c      	ldr	r3, [pc, #624]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800058a:	b29a      	uxth	r2, r3
 800058c:	4b97      	ldr	r3, [pc, #604]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800058e:	811a      	strh	r2, [r3, #8]
	//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//cw
	//		TIM13 -> CCR1 = Motor_CCR[3];
	//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);//ccw
	//		TIM14 -> CCR1 = Motor_CCR[4];
	//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
			cnt_control++;
 8000590:	4b9a      	ldr	r3, [pc, #616]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a99      	ldr	r2, [pc, #612]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000598:	6013      	str	r3, [r2, #0]

				  for(int i = 0; i<5; i++){
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
 800059e:	e012      	b.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0x86>
			      En_Cnt_Err[i] = (encoder_cnt[i] - En_Cnt_Pre[i]);
 80005a0:	4a92      	ldr	r2, [pc, #584]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	4a94      	ldr	r2, [pc, #592]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	1aca      	subs	r2, r1, r3
 80005b8:	4992      	ldr	r1, [pc, #584]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  for(int i = 0; i<5; i++){
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	3301      	adds	r3, #1
 80005c4:	61fb      	str	r3, [r7, #28]
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	dde9      	ble.n	80005a0 <HAL_TIM_PeriodElapsedCallback+0x60>
				  }
			      // Encoder Exception Handling
				  for(int i = 0; i<5; i++){
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
 80005d0:	e03c      	b.n	800064c <HAL_TIM_PeriodElapsedCallback+0x10c>
			      if (encoder_cnt[i] > 60000 && En_Cnt_Pre[i] < 5000)
 80005d2:	4a86      	ldr	r2, [pc, #536]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d913      	bls.n	800060c <HAL_TIM_PeriodElapsedCallback+0xcc>
 80005e4:	4a86      	ldr	r2, [pc, #536]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d80a      	bhi.n	800060c <HAL_TIM_PeriodElapsedCallback+0xcc>
			         En_Cnt_Err[i] -= 65535;
 80005f6:	4a83      	ldr	r2, [pc, #524]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005fe:	4b82      	ldr	r3, [pc, #520]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000600:	4413      	add	r3, r2
 8000602:	4980      	ldr	r1, [pc, #512]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800060a:	e01c      	b.n	8000646 <HAL_TIM_PeriodElapsedCallback+0x106>
			      else if (encoder_cnt[i] < 5000 && En_Cnt_Pre[i] > 60000)
 800060c:	4a77      	ldr	r2, [pc, #476]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000614:	b29b      	uxth	r3, r3
 8000616:	f241 3287 	movw	r2, #4999	; 0x1387
 800061a:	4293      	cmp	r3, r2
 800061c:	d813      	bhi.n	8000646 <HAL_TIM_PeriodElapsedCallback+0x106>
 800061e:	4a78      	ldr	r2, [pc, #480]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000626:	b29b      	uxth	r3, r3
 8000628:	f64e 2260 	movw	r2, #60000	; 0xea60
 800062c:	4293      	cmp	r3, r2
 800062e:	d90a      	bls.n	8000646 <HAL_TIM_PeriodElapsedCallback+0x106>
			         En_Cnt_Err[i] += 65535;
 8000630:	4a74      	ldr	r2, [pc, #464]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800063c:	4413      	add	r3, r2
 800063e:	4971      	ldr	r1, [pc, #452]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000640:	69ba      	ldr	r2, [r7, #24]
 8000642:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
				  for(int i = 0; i<5; i++){
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	3301      	adds	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	2b04      	cmp	r3, #4
 8000650:	ddbf      	ble.n	80005d2 <HAL_TIM_PeriodElapsedCallback+0x92>
				  }
			      // Get Angle
			      Angle_Cur[0] += (En_Cnt_Err[0] / (1024. * 4 * 126.)) * 2 * pi;   // rad
 8000652:	4b6c      	ldr	r3, [pc, #432]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	ee07 3a90 	vmov	s15, r3
 800065a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800065e:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80007b0 <HAL_TIM_PeriodElapsedCallback+0x270>
 8000662:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000666:	ee37 7b07 	vadd.f64	d7, d7, d7
 800066a:	ed9f 6b53 	vldr	d6, [pc, #332]	; 80007b8 <HAL_TIM_PeriodElapsedCallback+0x278>
 800066e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000672:	4b66      	ldr	r3, [pc, #408]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000674:	ed93 7b00 	vldr	d7, [r3]
 8000678:	ee36 7b07 	vadd.f64	d7, d6, d7
 800067c:	4b63      	ldr	r3, [pc, #396]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800067e:	ed83 7b00 	vstr	d7, [r3]
			      Angle_Cur[1] += (En_Cnt_Err[1] / (1024. * 4 * 126.)) * 2 * pi;   // rad
 8000682:	4b60      	ldr	r3, [pc, #384]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	ee07 3a90 	vmov	s15, r3
 800068a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800068e:	ed9f 5b48 	vldr	d5, [pc, #288]	; 80007b0 <HAL_TIM_PeriodElapsedCallback+0x270>
 8000692:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000696:	ee37 7b07 	vadd.f64	d7, d7, d7
 800069a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80007b8 <HAL_TIM_PeriodElapsedCallback+0x278>
 800069e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006a2:	4b5a      	ldr	r3, [pc, #360]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006a4:	ed93 7b02 	vldr	d7, [r3, #8]
 80006a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006ac:	4b57      	ldr	r3, [pc, #348]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006ae:	ed83 7b02 	vstr	d7, [r3, #8]
			      Angle_Cur[2] += (En_Cnt_Err[2] / (1024. * 4 * 100.)) * 2 * pi;   // rad
 80006b2:	4b54      	ldr	r3, [pc, #336]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	ee07 3a90 	vmov	s15, r3
 80006ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006be:	ed9f 5b40 	vldr	d5, [pc, #256]	; 80007c0 <HAL_TIM_PeriodElapsedCallback+0x280>
 80006c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80006ca:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80007b8 <HAL_TIM_PeriodElapsedCallback+0x278>
 80006ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d2:	4b4e      	ldr	r3, [pc, #312]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006d4:	ed93 7b04 	vldr	d7, [r3, #16]
 80006d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006dc:	4b4b      	ldr	r3, [pc, #300]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006de:	ed83 7b04 	vstr	d7, [r3, #16]
			      Angle_Cur[3] += (En_Cnt_Err[3] / (1024. * 4 * 105.)) * 2 * pi;   // rad
 80006e2:	4b48      	ldr	r3, [pc, #288]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	ee07 3a90 	vmov	s15, r3
 80006ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006ee:	ed9f 5b36 	vldr	d5, [pc, #216]	; 80007c8 <HAL_TIM_PeriodElapsedCallback+0x288>
 80006f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80006fa:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80007b8 <HAL_TIM_PeriodElapsedCallback+0x278>
 80006fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000702:	4b42      	ldr	r3, [pc, #264]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000704:	ed93 7b06 	vldr	d7, [r3, #24]
 8000708:	ee36 7b07 	vadd.f64	d7, d6, d7
 800070c:	4b3f      	ldr	r3, [pc, #252]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800070e:	ed83 7b06 	vstr	d7, [r3, #24]
			      Angle_Cur[4] += (En_Cnt_Err[4] / (1024. * 4 * 132.)) * 2 * pi;   // rad
 8000712:	4b3c      	ldr	r3, [pc, #240]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800071e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80007d0 <HAL_TIM_PeriodElapsedCallback+0x290>
 8000722:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000726:	ee37 7b07 	vadd.f64	d7, d7, d7
 800072a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80007b8 <HAL_TIM_PeriodElapsedCallback+0x278>
 800072e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000734:	ed93 7b08 	vldr	d7, [r3, #32]
 8000738:	ee36 7b07 	vadd.f64	d7, d6, d7
 800073c:	4b33      	ldr	r3, [pc, #204]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800073e:	ed83 7b08 	vstr	d7, [r3, #32]

			      for(int i = 0; i<5; i++){
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	e01b      	b.n	8000780 <HAL_TIM_PeriodElapsedCallback+0x240>
			      Angle_Curdeg[i] = Angle_Cur[i] *RAD2DEG;
 8000748:	4a30      	ldr	r2, [pc, #192]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	4413      	add	r3, r2
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80007d8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8000758:	ee27 7b06 	vmul.f64	d7, d7, d6
 800075c:	4a2c      	ldr	r2, [pc, #176]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	4413      	add	r3, r2
 8000764:	ed83 7b00 	vstr	d7, [r3]
			      En_Cnt_Pre[i] = encoder_cnt[i];
 8000768:	4a20      	ldr	r2, [pc, #128]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000770:	b299      	uxth	r1, r3
 8000772:	4a23      	ldr	r2, [pc, #140]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			      for(int i = 0; i<5; i++){
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	2b04      	cmp	r3, #4
 8000784:	dde0      	ble.n	8000748 <HAL_TIM_PeriodElapsedCallback+0x208>
				  }
			      // Save Previous Value

			      //////////////////////////////////////////////////////////////////////
			      if(cnt_control % 100 == 0) //
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b22      	ldr	r3, [pc, #136]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800078c:	fb83 1302 	smull	r1, r3, r3, r2
 8000790:	1159      	asrs	r1, r3, #5
 8000792:	17d3      	asrs	r3, r2, #31
 8000794:	1acb      	subs	r3, r1, r3
 8000796:	2164      	movs	r1, #100	; 0x64
 8000798:	fb01 f303 	mul.w	r3, r1, r3
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f040 80da 	bne.w	8000958 <HAL_TIM_PeriodElapsedCallback+0x418>
			      {
					 for(int i = 0; i<5; i++){
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	e0d2      	b.n	8000950 <HAL_TIM_PeriodElapsedCallback+0x410>
 80007aa:	bf00      	nop
 80007ac:	f3af 8000 	nop.w
 80007b0:	00000000 	.word	0x00000000
 80007b4:	411f8000 	.word	0x411f8000
 80007b8:	54442d18 	.word	0x54442d18
 80007bc:	400921fb 	.word	0x400921fb
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41190000 	.word	0x41190000
 80007c8:	00000000 	.word	0x00000000
 80007cc:	411a4000 	.word	0x411a4000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41208000 	.word	0x41208000
 80007d8:	1615ebfb 	.word	0x1615ebfb
 80007dc:	404ca5dc 	.word	0x404ca5dc
 80007e0:	20000c1c 	.word	0x20000c1c
 80007e4:	2000050c 	.word	0x2000050c
 80007e8:	40010000 	.word	0x40010000
 80007ec:	20000de8 	.word	0x20000de8
 80007f0:	40000400 	.word	0x40000400
 80007f4:	40000800 	.word	0x40000800
 80007f8:	40010400 	.word	0x40010400
 80007fc:	20000c18 	.word	0x20000c18
 8000800:	20000df4 	.word	0x20000df4
 8000804:	20000e00 	.word	0x20000e00
 8000808:	ffff0001 	.word	0xffff0001
 800080c:	20000e18 	.word	0x20000e18
 8000810:	20000e40 	.word	0x20000e40
 8000814:	51eb851f 	.word	0x51eb851f

			         g_Pdes[i] = g_ref[i] * DEG2RAD;
 8000818:	4a5d      	ldr	r2, [pc, #372]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x450>)
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	4413      	add	r3, r2
 8000820:	ed93 7b00 	vldr	d7, [r3]
 8000824:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8000980 <HAL_TIM_PeriodElapsedCallback+0x440>
 8000828:	ee27 7b06 	vmul.f64	d7, d7, d6
 800082c:	4a59      	ldr	r2, [pc, #356]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x454>)
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	4413      	add	r3, r2
 8000834:	ed83 7b00 	vstr	d7, [r3]

			         g_Pcur[i] = Angle_Cur[i];
 8000838:	4a57      	ldr	r2, [pc, #348]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x458>)
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000844:	4855      	ldr	r0, [pc, #340]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8000846:	6939      	ldr	r1, [r7, #16]
 8000848:	00c9      	lsls	r1, r1, #3
 800084a:	4401      	add	r1, r0
 800084c:	e9c1 2300 	strd	r2, r3, [r1]
			         // D?  ?   ????? ?  ?   previous Error ???
			         g_Pperr[i] = g_Perr[i];
 8000850:	4a53      	ldr	r2, [pc, #332]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	4413      	add	r3, r2
 8000858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800085c:	4851      	ldr	r0, [pc, #324]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x464>)
 800085e:	6939      	ldr	r1, [r7, #16]
 8000860:	00c9      	lsls	r1, r1, #3
 8000862:	4401      	add	r1, r0
 8000864:	e9c1 2300 	strd	r2, r3, [r1]

			         // Error ???
			         g_Perr[i] = g_Pdes[i] - g_Pcur[i];
 8000868:	4a4a      	ldr	r2, [pc, #296]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x454>)
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	4413      	add	r3, r2
 8000870:	ed93 6b00 	vldr	d6, [r3]
 8000874:	4a49      	ldr	r2, [pc, #292]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	4413      	add	r3, r2
 800087c:	ed93 7b00 	vldr	d7, [r3]
 8000880:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000884:	4a46      	ldr	r2, [pc, #280]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	4413      	add	r3, r2
 800088c:	ed83 7b00 	vstr	d7, [r3]

			         // Position Control output = Speed value
			         g_pos_control[i] = Kp_P[i] * g_Perr[i] + Kd_P [i]* ((g_Perr[i] - g_Pperr[i]) / dt_pos);
 8000890:	4a45      	ldr	r2, [pc, #276]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	4413      	add	r3, r2
 8000898:	ed93 6b00 	vldr	d6, [r3]
 800089c:	4a40      	ldr	r2, [pc, #256]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	4413      	add	r3, r2
 80008a4:	ed93 7b00 	vldr	d7, [r3]
 80008a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80008ac:	4a3f      	ldr	r2, [pc, #252]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	4413      	add	r3, r2
 80008b4:	ed93 5b00 	vldr	d5, [r3]
 80008b8:	4a39      	ldr	r2, [pc, #228]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	4413      	add	r3, r2
 80008c0:	ed93 4b00 	vldr	d4, [r3]
 80008c4:	4a37      	ldr	r2, [pc, #220]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x464>)
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	4413      	add	r3, r2
 80008cc:	ed93 7b00 	vldr	d7, [r3]
 80008d0:	ee34 4b47 	vsub.f64	d4, d4, d7
 80008d4:	ed9f 3b2c 	vldr	d3, [pc, #176]	; 8000988 <HAL_TIM_PeriodElapsedCallback+0x448>
 80008d8:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80008dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80008e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008e4:	4a32      	ldr	r2, [pc, #200]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	4413      	add	r3, r2
 80008ec:	ed83 7b00 	vstr	d7, [r3]
			         // Saturation
			         if(g_pos_control[i] > 0.75) g_pos_control[i] = 0.75;
 80008f0:	4a2f      	ldr	r2, [pc, #188]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	4413      	add	r3, r2
 80008f8:	ed93 7b00 	vldr	d7, [r3]
 80008fc:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8000900:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000908:	dd09      	ble.n	800091e <HAL_TIM_PeriodElapsedCallback+0x3de>
 800090a:	4a29      	ldr	r2, [pc, #164]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	18d1      	adds	r1, r2, r3
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000918:	e9c1 2300 	strd	r2, r3, [r1]
 800091c:	e015      	b.n	800094a <HAL_TIM_PeriodElapsedCallback+0x40a>
			         else if(g_pos_control[i] < -0.75) g_pos_control[i] = -0.75;
 800091e:	4a24      	ldr	r2, [pc, #144]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	4413      	add	r3, r2
 8000926:	ed93 7b00 	vldr	d7, [r3]
 800092a:	eebe 6b08 	vmov.f64	d6, #232	; 0xbf400000 -0.750
 800092e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000936:	d508      	bpl.n	800094a <HAL_TIM_PeriodElapsedCallback+0x40a>
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	18d1      	adds	r1, r2, r3
 8000940:	f04f 0200 	mov.w	r2, #0
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000946:	e9c1 2300 	strd	r2, r3, [r1]
					 for(int i = 0; i<5; i++){
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	3301      	adds	r3, #1
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	2b04      	cmp	r3, #4
 8000954:	f77f af60 	ble.w	8000818 <HAL_TIM_PeriodElapsedCallback+0x2d8>

					 }
			      }
			      ///////////////////////////////////////////////////////////////////////////

			      if(cnt_control % 10 == 0) //
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800095a:	6819      	ldr	r1, [r3, #0]
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800095e:	fb83 2301 	smull	r2, r3, r3, r1
 8000962:	109a      	asrs	r2, r3, #2
 8000964:	17cb      	asrs	r3, r1, #31
 8000966:	1ad2      	subs	r2, r2, r3
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	1aca      	subs	r2, r1, r3
 8000972:	2a00      	cmp	r2, #0
 8000974:	f040 8305 	bne.w	8000f82 <HAL_TIM_PeriodElapsedCallback+0xa42>
			      {
			    	 for(int i = 0; i<5; i++){
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	e2fd      	b.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0xa3a>
 800097e:	bf00      	nop
 8000980:	6cd799af 	.word	0x6cd799af
 8000984:	3f91df40 	.word	0x3f91df40
 8000988:	9999999a 	.word	0x9999999a
 800098c:	3fa99999 	.word	0x3fa99999
 8000990:	20000c30 	.word	0x20000c30
 8000994:	20000c58 	.word	0x20000c58
 8000998:	20000e18 	.word	0x20000e18
 800099c:	20000c80 	.word	0x20000c80
 80009a0:	20000ca8 	.word	0x20000ca8
 80009a4:	20000cd0 	.word	0x20000cd0
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000028 	.word	0x20000028
 80009b0:	20000cf8 	.word	0x20000cf8
 80009b4:	3fe80000 	.word	0x3fe80000
 80009b8:	bfe80000 	.word	0xbfe80000
 80009bc:	20000c18 	.word	0x20000c18
 80009c0:	66666667 	.word	0x66666667
			    	 Vel_Ref[i] = 	g_pos_control[i];
 80009c4:	4a9c      	ldr	r2, [pc, #624]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	4413      	add	r3, r2
 80009cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d0:	489a      	ldr	r0, [pc, #616]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80009d2:	68f9      	ldr	r1, [r7, #12]
 80009d4:	00c9      	lsls	r1, r1, #3
 80009d6:	4401      	add	r1, r0
 80009d8:	e9c1 2300 	strd	r2, r3, [r1]
			         if(Vel_Ref[i] >= 0){
 80009dc:	4a97      	ldr	r2, [pc, #604]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	4413      	add	r3, r2
 80009e4:	ed93 7b00 	vldr	d7, [r3]
 80009e8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80009ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f0:	f2c0 817d 	blt.w	8000cee <HAL_TIM_PeriodElapsedCallback+0x7ae>
						 // Set Velocity Limit
						 if(Vel_Ref[i] > Vel_Max[i]) Vel_Ref[i] = Vel_Max[i];
 80009f4:	4a91      	ldr	r2, [pc, #580]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4413      	add	r3, r2
 80009fc:	ed93 6b00 	vldr	d6, [r3]
 8000a00:	4a8f      	ldr	r2, [pc, #572]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	4413      	add	r3, r2
 8000a08:	ed93 7b00 	vldr	d7, [r3]
 8000a0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a14:	dd0b      	ble.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x4ee>
 8000a16:	4a8a      	ldr	r2, [pc, #552]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	4413      	add	r3, r2
 8000a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a22:	4886      	ldr	r0, [pc, #536]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8000a24:	68f9      	ldr	r1, [r7, #12]
 8000a26:	00c9      	lsls	r1, r1, #3
 8000a28:	4401      	add	r1, r0
 8000a2a:	e9c1 2300 	strd	r2, r3, [r1]

						 // Get Velocity
						 Vel_Cur[i] = (Angle_Cur[i] - Angle_Pre[i]) / dt_vel;      // rad/s
 8000a2e:	4a85      	ldr	r2, [pc, #532]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	4413      	add	r3, r2
 8000a36:	ed93 6b00 	vldr	d6, [r3]
 8000a3a:	4a83      	ldr	r2, [pc, #524]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	4413      	add	r3, r2
 8000a42:	ed93 7b00 	vldr	d7, [r3]
 8000a46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000a4a:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8000c28 <HAL_TIM_PeriodElapsedCallback+0x6e8>
 8000a4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a52:	4a7e      	ldr	r2, [pc, #504]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	4413      	add	r3, r2
 8000a5a:	ed83 7b00 	vstr	d7, [r3]

						 // Save Previous Value
						 Angle_Pre[i] = Angle_Cur[i];
 8000a5e:	4a79      	ldr	r2, [pc, #484]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	4413      	add	r3, r2
 8000a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a6a:	4877      	ldr	r0, [pc, #476]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8000a6c:	68f9      	ldr	r1, [r7, #12]
 8000a6e:	00c9      	lsls	r1, r1, #3
 8000a70:	4401      	add	r1, r0
 8000a72:	e9c1 2300 	strd	r2, r3, [r1]

						 // Get Velocity Err
						 Vel_Err[i] = Vel_Ref[i] - Vel_Cur[i];
 8000a76:	4a71      	ldr	r2, [pc, #452]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	ed93 6b00 	vldr	d6, [r3]
 8000a82:	4a72      	ldr	r2, [pc, #456]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	4413      	add	r3, r2
 8000a8a:	ed93 7b00 	vldr	d7, [r3]
 8000a8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a92:	4a6f      	ldr	r2, [pc, #444]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	4413      	add	r3, r2
 8000a9a:	ed83 7b00 	vstr	d7, [r3]

						 // Get Velocity Err Sum
						 Vel_Err_Sum[i] += Vel_Err[i];
 8000a9e:	4a6c      	ldr	r2, [pc, #432]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	ed93 6b00 	vldr	d6, [r3]
 8000aaa:	4a6a      	ldr	r2, [pc, #424]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	ed93 7b00 	vldr	d7, [r3]
 8000ab6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000aba:	4a66      	ldr	r2, [pc, #408]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	4413      	add	r3, r2
 8000ac2:	ed83 7b00 	vstr	d7, [r3]

						 // Get Velocity Control Output
						 Vel_Ctrl_Out[i] = (Kp_V[i] * Vel_Err[i]) + (Ki_V[i] * Vel_Err_Sum[i] * dt_vel);
 8000ac6:	4a64      	ldr	r2, [pc, #400]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	4413      	add	r3, r2
 8000ace:	ed93 6b00 	vldr	d6, [r3]
 8000ad2:	4a5f      	ldr	r2, [pc, #380]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	4413      	add	r3, r2
 8000ada:	ed93 7b00 	vldr	d7, [r3]
 8000ade:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000ae2:	4a5e      	ldr	r2, [pc, #376]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	4413      	add	r3, r2
 8000aea:	ed93 5b00 	vldr	d5, [r3]
 8000aee:	4a59      	ldr	r2, [pc, #356]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	4413      	add	r3, r2
 8000af6:	ed93 7b00 	vldr	d7, [r3]
 8000afa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000afe:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000c28 <HAL_TIM_PeriodElapsedCallback+0x6e8>
 8000b02:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b0a:	4a55      	ldr	r2, [pc, #340]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	4413      	add	r3, r2
 8000b12:	ed83 7b00 	vstr	d7, [r3]

						 if(Vel_Ctrl_Out[i] < -0.1) Vel_Ctrl_Out[i] = Vel_Cur[i] * 0.5;
 8000b16:	4a52      	ldr	r2, [pc, #328]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	4413      	add	r3, r2
 8000b1e:	ed93 7b00 	vldr	d7, [r3]
 8000b22:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8000c30 <HAL_TIM_PeriodElapsedCallback+0x6f0>
 8000b26:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2e:	d510      	bpl.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0x612>
 8000b30:	4a46      	ldr	r2, [pc, #280]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	4413      	add	r3, r2
 8000b38:	ed93 7b00 	vldr	d7, [r3]
 8000b3c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000b40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b44:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	4413      	add	r3, r2
 8000b4c:	ed83 7b00 	vstr	d7, [r3]
 8000b50:	e024      	b.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x65c>
						 else if(Vel_Ctrl_Out[i] >= -0.1) Vel_Ctrl_Out[i] = Vel_Ctrl_Out[i]+ 0.75*Vel_Cur[i];
 8000b52:	4a43      	ldr	r2, [pc, #268]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	4413      	add	r3, r2
 8000b5a:	ed93 7b00 	vldr	d7, [r3]
 8000b5e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8000c30 <HAL_TIM_PeriodElapsedCallback+0x6f0>
 8000b62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6a:	db17      	blt.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x65c>
 8000b6c:	4a3c      	ldr	r2, [pc, #240]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4413      	add	r3, r2
 8000b74:	ed93 6b00 	vldr	d6, [r3]
 8000b78:	4a34      	ldr	r2, [pc, #208]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	ed93 7b00 	vldr	d7, [r3]
 8000b84:	eeb6 5b08 	vmov.f64	d5, #104	; 0x3f400000  0.750
 8000b88:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b90:	4a33      	ldr	r2, [pc, #204]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	4413      	add	r3, r2
 8000b98:	ed83 7b00 	vstr	d7, [r3]
						 // Current saturation & Anti wind-up
						 if(Vel_Ctrl_Out[i] > Vel_Max[i])
 8000b9c:	4a30      	ldr	r2, [pc, #192]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	ed93 6b00 	vldr	d6, [r3]
 8000ba8:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	4413      	add	r3, r2
 8000bb0:	ed93 7b00 	vldr	d7, [r3]
 8000bb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbc:	dd52      	ble.n	8000c64 <HAL_TIM_PeriodElapsedCallback+0x724>
						 {
							Vel_Err_Sum[i] -= (Vel_Ctrl_Out[i] - Vel_Max[i]) * (3. / Kp_V[i]);
 8000bbe:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	4413      	add	r3, r2
 8000bc6:	ed93 6b00 	vldr	d6, [r3]
 8000bca:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	4413      	add	r3, r2
 8000bd2:	ed93 7b00 	vldr	d7, [r3]
 8000bd6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000bda:	4a1f      	ldr	r2, [pc, #124]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	4413      	add	r3, r2
 8000be2:	ed93 5b00 	vldr	d5, [r3]
 8000be6:	eeb0 4b08 	vmov.f64	d4, #8	; 0x40400000  3.0
 8000bea:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000bee:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000bf2:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	4413      	add	r3, r2
 8000bfa:	ed93 6b00 	vldr	d6, [r3]
 8000bfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4413      	add	r3, r2
 8000c0a:	ed83 7b00 	vstr	d7, [r3]
							Vel_Ctrl_Out[i] = Vel_Max[i];
 8000c0e:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	4413      	add	r3, r2
 8000c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1a:	4811      	ldr	r0, [pc, #68]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8000c1c:	68f9      	ldr	r1, [r7, #12]
 8000c1e:	00c9      	lsls	r1, r1, #3
 8000c20:	4401      	add	r1, r0
 8000c22:	e9c1 2300 	strd	r2, r3, [r1]
 8000c26:	e062      	b.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x7ae>
 8000c28:	47ae147b 	.word	0x47ae147b
 8000c2c:	3f747ae1 	.word	0x3f747ae1
 8000c30:	9999999a 	.word	0x9999999a
 8000c34:	bfb99999 	.word	0xbfb99999
 8000c38:	20000cf8 	.word	0x20000cf8
 8000c3c:	20000d20 	.word	0x20000d20
 8000c40:	20000050 	.word	0x20000050
 8000c44:	20000e18 	.word	0x20000e18
 8000c48:	20000e68 	.word	0x20000e68
 8000c4c:	20000d48 	.word	0x20000d48
 8000c50:	20000d70 	.word	0x20000d70
 8000c54:	20000d98 	.word	0x20000d98
 8000c58:	200000a0 	.word	0x200000a0
 8000c5c:	200000c8 	.word	0x200000c8
 8000c60:	20000dc0 	.word	0x20000dc0
						 }
						 else if(Vel_Ctrl_Out[i] < Vel_Min[i])
 8000c64:	4a84      	ldr	r2, [pc, #528]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	4413      	add	r3, r2
 8000c6c:	ed93 6b00 	vldr	d6, [r3]
 8000c70:	4a82      	ldr	r2, [pc, #520]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4413      	add	r3, r2
 8000c78:	ed93 7b00 	vldr	d7, [r3]
 8000c7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c84:	d533      	bpl.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x7ae>
						 {
							Vel_Err_Sum[i] -= (Vel_Ctrl_Out[i] - Vel_Min[i]) * (3. / Kp_V[i]);
 8000c86:	4a7c      	ldr	r2, [pc, #496]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	ed93 6b00 	vldr	d6, [r3]
 8000c92:	4a7a      	ldr	r2, [pc, #488]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4413      	add	r3, r2
 8000c9a:	ed93 7b00 	vldr	d7, [r3]
 8000c9e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000ca2:	4a77      	ldr	r2, [pc, #476]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	4413      	add	r3, r2
 8000caa:	ed93 5b00 	vldr	d5, [r3]
 8000cae:	eeb0 4b08 	vmov.f64	d4, #8	; 0x40400000  3.0
 8000cb2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000cb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000cba:	4a72      	ldr	r2, [pc, #456]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	4413      	add	r3, r2
 8000cc2:	ed93 6b00 	vldr	d6, [r3]
 8000cc6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000cca:	4a6e      	ldr	r2, [pc, #440]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	ed83 7b00 	vstr	d7, [r3]
							Vel_Ctrl_Out[i] = Vel_Min[i];
 8000cd6:	4a69      	ldr	r2, [pc, #420]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	4413      	add	r3, r2
 8000cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce2:	4865      	ldr	r0, [pc, #404]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8000ce4:	68f9      	ldr	r1, [r7, #12]
 8000ce6:	00c9      	lsls	r1, r1, #3
 8000ce8:	4401      	add	r1, r0
 8000cea:	e9c1 2300 	strd	r2, r3, [r1]
						 }
			         }
			         if(Vel_Ref[i] < 0){
 8000cee:	4a66      	ldr	r2, [pc, #408]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	ed93 7b00 	vldr	d7, [r3]
 8000cfa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	f140 8137 	bpl.w	8000f74 <HAL_TIM_PeriodElapsedCallback+0xa34>
						 // Set Velocity Limit
						 if(Vel_Ref[i] < Vel_Min[i]) Vel_Ref[i] = Vel_Min[i];
 8000d06:	4a60      	ldr	r2, [pc, #384]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	ed93 6b00 	vldr	d6, [r3]
 8000d12:	4a5a      	ldr	r2, [pc, #360]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	4413      	add	r3, r2
 8000d1a:	ed93 7b00 	vldr	d7, [r3]
 8000d1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d26:	d50b      	bpl.n	8000d40 <HAL_TIM_PeriodElapsedCallback+0x800>
 8000d28:	4a54      	ldr	r2, [pc, #336]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	4413      	add	r3, r2
 8000d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d34:	4854      	ldr	r0, [pc, #336]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8000d36:	68f9      	ldr	r1, [r7, #12]
 8000d38:	00c9      	lsls	r1, r1, #3
 8000d3a:	4401      	add	r1, r0
 8000d3c:	e9c1 2300 	strd	r2, r3, [r1]

						 // Get Velocity
						 Vel_Cur[i] = (Angle_Cur[i] - Angle_Pre[i]) / dt_vel;      // rad/s
 8000d40:	4a52      	ldr	r2, [pc, #328]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	ed93 6b00 	vldr	d6, [r3]
 8000d4c:	4a50      	ldr	r2, [pc, #320]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4413      	add	r3, r2
 8000d54:	ed93 7b00 	vldr	d7, [r3]
 8000d58:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d5c:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8000e68 <HAL_TIM_PeriodElapsedCallback+0x928>
 8000d60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d64:	4a4b      	ldr	r2, [pc, #300]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	4413      	add	r3, r2
 8000d6c:	ed83 7b00 	vstr	d7, [r3]

						 // Save Previous Value
						 Angle_Pre[i] = Angle_Cur[i];
 8000d70:	4a46      	ldr	r2, [pc, #280]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4413      	add	r3, r2
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	4844      	ldr	r0, [pc, #272]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8000d7e:	68f9      	ldr	r1, [r7, #12]
 8000d80:	00c9      	lsls	r1, r1, #3
 8000d82:	4401      	add	r1, r0
 8000d84:	e9c1 2300 	strd	r2, r3, [r1]

						 // Get Velocity Err
						 Vel_Err[i] = Vel_Ref[i] - Vel_Cur[i];
 8000d88:	4a3f      	ldr	r2, [pc, #252]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4413      	add	r3, r2
 8000d90:	ed93 6b00 	vldr	d6, [r3]
 8000d94:	4a3f      	ldr	r2, [pc, #252]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	ed93 7b00 	vldr	d7, [r3]
 8000da0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000da4:	4a3c      	ldr	r2, [pc, #240]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4413      	add	r3, r2
 8000dac:	ed83 7b00 	vstr	d7, [r3]

						 // Get Velocity Err Sum
						 Vel_Err_Sum[i] += Vel_Err[i];
 8000db0:	4a39      	ldr	r2, [pc, #228]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	4413      	add	r3, r2
 8000db8:	ed93 6b00 	vldr	d6, [r3]
 8000dbc:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	ed93 7b00 	vldr	d7, [r3]
 8000dc8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dcc:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	ed83 7b00 	vstr	d7, [r3]

						 // Get Velocity Control Output
						 Vel_Ctrl_Out[i] = (Kp_V[i] * Vel_Err[i]) + (Ki_V[i] * Vel_Err_Sum[i] * dt_vel);
 8000dd8:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4413      	add	r3, r2
 8000de0:	ed93 6b00 	vldr	d6, [r3]
 8000de4:	4a2c      	ldr	r2, [pc, #176]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	4413      	add	r3, r2
 8000dec:	ed93 7b00 	vldr	d7, [r3]
 8000df0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000df4:	4a29      	ldr	r2, [pc, #164]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	ed93 5b00 	vldr	d5, [r3]
 8000e00:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	ed93 7b00 	vldr	d7, [r3]
 8000e0c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e10:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000e68 <HAL_TIM_PeriodElapsedCallback+0x928>
 8000e14:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e1c:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	4413      	add	r3, r2
 8000e24:	ed83 7b00 	vstr	d7, [r3]

						 if(Vel_Ctrl_Out[i] > +0.1) Vel_Ctrl_Out[i] = Vel_Cur[i] * 0.5;
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4413      	add	r3, r2
 8000e30:	ed93 7b00 	vldr	d7, [r3]
 8000e34:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000e70 <HAL_TIM_PeriodElapsedCallback+0x930>
 8000e38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	dd2e      	ble.n	8000ea0 <HAL_TIM_PeriodElapsedCallback+0x960>
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4413      	add	r3, r2
 8000e4a:	ed93 7b00 	vldr	d7, [r3]
 8000e4e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000e52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	ed83 7b00 	vstr	d7, [r3]
 8000e62:	e042      	b.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x9aa>
 8000e64:	f3af 8000 	nop.w
 8000e68:	47ae147b 	.word	0x47ae147b
 8000e6c:	3f747ae1 	.word	0x3f747ae1
 8000e70:	9999999a 	.word	0x9999999a
 8000e74:	3fb99999 	.word	0x3fb99999
 8000e78:	20000dc0 	.word	0x20000dc0
 8000e7c:	20000078 	.word	0x20000078
 8000e80:	200000a0 	.word	0x200000a0
 8000e84:	20000d98 	.word	0x20000d98
 8000e88:	20000d20 	.word	0x20000d20
 8000e8c:	20000e18 	.word	0x20000e18
 8000e90:	20000e68 	.word	0x20000e68
 8000e94:	20000d48 	.word	0x20000d48
 8000e98:	20000d70 	.word	0x20000d70
 8000e9c:	200000c8 	.word	0x200000c8
						 else if(Vel_Ctrl_Out[i] <= +0.1) Vel_Ctrl_Out[i] = Vel_Ctrl_Out[i] + 0.75*Vel_Cur[i];
 8000ea0:	4a4f      	ldr	r2, [pc, #316]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	ed93 7b00 	vldr	d7, [r3]
 8000eac:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8000fd8 <HAL_TIM_PeriodElapsedCallback+0xa98>
 8000eb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb8:	d817      	bhi.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x9aa>
 8000eba:	4a49      	ldr	r2, [pc, #292]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	4413      	add	r3, r2
 8000ec2:	ed93 6b00 	vldr	d6, [r3]
 8000ec6:	4a47      	ldr	r2, [pc, #284]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0xaa4>)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4413      	add	r3, r2
 8000ece:	ed93 7b00 	vldr	d7, [r3]
 8000ed2:	eeb6 5b08 	vmov.f64	d5, #104	; 0x3f400000  0.750
 8000ed6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000eda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ede:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	ed83 7b00 	vstr	d7, [r3]
						 // Current saturation & Anti wind-up
						 if(Vel_Ctrl_Out[i] < Vel_Min[i])
 8000eea:	4a3d      	ldr	r2, [pc, #244]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	4413      	add	r3, r2
 8000ef2:	ed93 6b00 	vldr	d6, [r3]
 8000ef6:	4a3c      	ldr	r2, [pc, #240]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0xaa8>)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	4413      	add	r3, r2
 8000efe:	ed93 7b00 	vldr	d7, [r3]
 8000f02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0a:	d533      	bpl.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0xa34>
						 {
							Vel_Err_Sum[i] -= (Vel_Ctrl_Out[i] - Vel_Min[i]) * (3. / Kp_V[i]);
 8000f0c:	4a34      	ldr	r2, [pc, #208]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	ed93 6b00 	vldr	d6, [r3]
 8000f18:	4a33      	ldr	r2, [pc, #204]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0xaa8>)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4413      	add	r3, r2
 8000f20:	ed93 7b00 	vldr	d7, [r3]
 8000f24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000f28:	4a30      	ldr	r2, [pc, #192]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	4413      	add	r3, r2
 8000f30:	ed93 5b00 	vldr	d5, [r3]
 8000f34:	eeb0 4b08 	vmov.f64	d4, #8	; 0x40400000  3.0
 8000f38:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f40:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4413      	add	r3, r2
 8000f48:	ed93 6b00 	vldr	d6, [r3]
 8000f4c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f50:	4a27      	ldr	r2, [pc, #156]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4413      	add	r3, r2
 8000f58:	ed83 7b00 	vstr	d7, [r3]
							Vel_Ctrl_Out[i] = Vel_Min[i];
 8000f5c:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0xaa8>)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4413      	add	r3, r2
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8000f6a:	68f9      	ldr	r1, [r7, #12]
 8000f6c:	00c9      	lsls	r1, r1, #3
 8000f6e:	4401      	add	r1, r0
 8000f70:	e9c1 2300 	strd	r2, r3, [r1]
			    	 for(int i = 0; i<5; i++){
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	f77f ad21 	ble.w	80009c4 <HAL_TIM_PeriodElapsedCallback+0x484>
						 }
			         }
			    	 }

			      }
			      if(cnt_control % 2 == 0){
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d11f      	bne.n	8000fce <HAL_TIM_PeriodElapsedCallback+0xa8e>
			    	 for(int i = 0; i<5; i++){
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	e019      	b.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0xa88>
			 			Make_PWM(Vel_Ctrl_Out[0], Vel_Ctrl_Out[1], Vel_Ctrl_Out[2], Vel_Ctrl_Out[3], Vel_Ctrl_Out[4]);
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8000f96:	ed93 7b00 	vldr	d7, [r3]
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8000f9c:	ed93 6b02 	vldr	d6, [r3, #8]
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8000fa2:	ed93 5b04 	vldr	d5, [r3, #16]
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8000fa8:	ed93 3b06 	vldr	d3, [r3, #24]
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8000fae:	ed93 4b08 	vldr	d4, [r3, #32]
 8000fb2:	eeb0 2b45 	vmov.f64	d2, d5
 8000fb6:	eeb0 1b46 	vmov.f64	d1, d6
 8000fba:	eeb0 0b47 	vmov.f64	d0, d7
 8000fbe:	f000 f81b 	bl	8000ff8 <Make_PWM>
			    	 for(int i = 0; i<5; i++){
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	dde2      	ble.n	8000f94 <HAL_TIM_PeriodElapsedCallback+0xa54>

					  }
			      }
		}
	}
}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	9999999a 	.word	0x9999999a
 8000fdc:	3fb99999 	.word	0x3fb99999
 8000fe0:	20000dc0 	.word	0x20000dc0
 8000fe4:	20000d48 	.word	0x20000d48
 8000fe8:	20000078 	.word	0x20000078
 8000fec:	200000a0 	.word	0x200000a0
 8000ff0:	20000d98 	.word	0x20000d98
 8000ff4:	20000c18 	.word	0x20000c18

08000ff8 <Make_PWM>:

void Make_PWM(double input_0, double input_1, double input_2, double input_3, double input_4)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	ed87 0b08 	vstr	d0, [r7, #32]
 8001002:	ed87 1b06 	vstr	d1, [r7, #24]
 8001006:	ed87 2b04 	vstr	d2, [r7, #16]
 800100a:	ed87 3b02 	vstr	d3, [r7, #8]
 800100e:	ed87 4b00 	vstr	d4, [r7]
	// Generate Motor PWM 0
    if(input_0 < 0)
 8001012:	ed97 7b08 	vldr	d7, [r7, #32]
 8001016:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	d51f      	bpl.n	8001060 <Make_PWM+0x68>
    {
       Motor_CCR[0] = (double)((-Vel_Ctrl_Out[0] / Vel_Max[0]) * 4119);
 8001020:	4bab      	ldr	r3, [pc, #684]	; (80012d0 <Make_PWM+0x2d8>)
 8001022:	ed93 7b00 	vldr	d7, [r3]
 8001026:	eeb1 5b47 	vneg.f64	d5, d7
 800102a:	4baa      	ldr	r3, [pc, #680]	; (80012d4 <Make_PWM+0x2dc>)
 800102c:	ed93 6b00 	vldr	d6, [r3]
 8001030:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001034:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80012c8 <Make_PWM+0x2d0>
 8001038:	ee27 7b06 	vmul.f64	d7, d7, d6
 800103c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001040:	ee17 3a90 	vmov	r3, s15
 8001044:	b29a      	uxth	r2, r3
 8001046:	4ba4      	ldr	r3, [pc, #656]	; (80012d8 <Make_PWM+0x2e0>)
 8001048:	801a      	strh	r2, [r3, #0]
       HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	48a3      	ldr	r0, [pc, #652]	; (80012dc <Make_PWM+0x2e4>)
 8001050:	f002 fad2 	bl	80035f8 <HAL_GPIO_WritePin>
       TIM5-> CCR4 = Motor_CCR[0];
 8001054:	4ba0      	ldr	r3, [pc, #640]	; (80012d8 <Make_PWM+0x2e0>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	b29a      	uxth	r2, r3
 800105a:	4ba1      	ldr	r3, [pc, #644]	; (80012e0 <Make_PWM+0x2e8>)
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
 800105e:	e01c      	b.n	800109a <Make_PWM+0xa2>
    }
    else
    {
       Motor_CCR[0] = (double)((Vel_Ctrl_Out[0] / Vel_Max[0]) * 4119);
 8001060:	4b9b      	ldr	r3, [pc, #620]	; (80012d0 <Make_PWM+0x2d8>)
 8001062:	ed93 5b00 	vldr	d5, [r3]
 8001066:	4b9b      	ldr	r3, [pc, #620]	; (80012d4 <Make_PWM+0x2dc>)
 8001068:	ed93 6b00 	vldr	d6, [r3]
 800106c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001070:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80012c8 <Make_PWM+0x2d0>
 8001074:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001078:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800107c:	ee17 3a90 	vmov	r3, s15
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b95      	ldr	r3, [pc, #596]	; (80012d8 <Make_PWM+0x2e0>)
 8001084:	801a      	strh	r2, [r3, #0]
       HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	4894      	ldr	r0, [pc, #592]	; (80012dc <Make_PWM+0x2e4>)
 800108c:	f002 fab4 	bl	80035f8 <HAL_GPIO_WritePin>
       TIM5 -> CCR4 = Motor_CCR[0];
 8001090:	4b91      	ldr	r3, [pc, #580]	; (80012d8 <Make_PWM+0x2e0>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b92      	ldr	r3, [pc, #584]	; (80012e0 <Make_PWM+0x2e8>)
 8001098:	641a      	str	r2, [r3, #64]	; 0x40
    }

	// Generate Motor PWM 1
    if(input_1 < 0)
 800109a:	ed97 7b06 	vldr	d7, [r7, #24]
 800109e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80010a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a6:	d51f      	bpl.n	80010e8 <Make_PWM+0xf0>
    {
       Motor_CCR[1] = (double)((-Vel_Ctrl_Out[1] / Vel_Max[1]) * 4119);
 80010a8:	4b89      	ldr	r3, [pc, #548]	; (80012d0 <Make_PWM+0x2d8>)
 80010aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80010ae:	eeb1 5b47 	vneg.f64	d5, d7
 80010b2:	4b88      	ldr	r3, [pc, #544]	; (80012d4 <Make_PWM+0x2dc>)
 80010b4:	ed93 6b02 	vldr	d6, [r3, #8]
 80010b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010bc:	ed9f 6b82 	vldr	d6, [pc, #520]	; 80012c8 <Make_PWM+0x2d0>
 80010c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010c8:	ee17 3a90 	vmov	r3, s15
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	4b82      	ldr	r3, [pc, #520]	; (80012d8 <Make_PWM+0x2e0>)
 80010d0:	805a      	strh	r2, [r3, #2]
       HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	4883      	ldr	r0, [pc, #524]	; (80012e4 <Make_PWM+0x2ec>)
 80010d8:	f002 fa8e 	bl	80035f8 <HAL_GPIO_WritePin>
       TIM11-> CCR1 = Motor_CCR[1];
 80010dc:	4b7e      	ldr	r3, [pc, #504]	; (80012d8 <Make_PWM+0x2e0>)
 80010de:	885b      	ldrh	r3, [r3, #2]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <Make_PWM+0x2f0>)
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
 80010e6:	e01c      	b.n	8001122 <Make_PWM+0x12a>
    }
    else
    {
       Motor_CCR[1] = (double)((Vel_Ctrl_Out[1] / Vel_Max[1]) * 4119);
 80010e8:	4b79      	ldr	r3, [pc, #484]	; (80012d0 <Make_PWM+0x2d8>)
 80010ea:	ed93 5b02 	vldr	d5, [r3, #8]
 80010ee:	4b79      	ldr	r3, [pc, #484]	; (80012d4 <Make_PWM+0x2dc>)
 80010f0:	ed93 6b02 	vldr	d6, [r3, #8]
 80010f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010f8:	ed9f 6b73 	vldr	d6, [pc, #460]	; 80012c8 <Make_PWM+0x2d0>
 80010fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001100:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001104:	ee17 3a90 	vmov	r3, s15
 8001108:	b29a      	uxth	r2, r3
 800110a:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <Make_PWM+0x2e0>)
 800110c:	805a      	strh	r2, [r3, #2]
       HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	2140      	movs	r1, #64	; 0x40
 8001112:	4874      	ldr	r0, [pc, #464]	; (80012e4 <Make_PWM+0x2ec>)
 8001114:	f002 fa70 	bl	80035f8 <HAL_GPIO_WritePin>
       TIM11 -> CCR1 = Motor_CCR[1];
 8001118:	4b6f      	ldr	r3, [pc, #444]	; (80012d8 <Make_PWM+0x2e0>)
 800111a:	885b      	ldrh	r3, [r3, #2]
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b72      	ldr	r3, [pc, #456]	; (80012e8 <Make_PWM+0x2f0>)
 8001120:	635a      	str	r2, [r3, #52]	; 0x34
    }

	// Generate Motor PWM 2
    if(input_2 < 0)
 8001122:	ed97 7b04 	vldr	d7, [r7, #16]
 8001126:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	d520      	bpl.n	8001172 <Make_PWM+0x17a>
    {
       Motor_CCR[2] = (double)((-Vel_Ctrl_Out[2] / Vel_Max[2]) * 4119);
 8001130:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <Make_PWM+0x2d8>)
 8001132:	ed93 7b04 	vldr	d7, [r3, #16]
 8001136:	eeb1 5b47 	vneg.f64	d5, d7
 800113a:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <Make_PWM+0x2dc>)
 800113c:	ed93 6b04 	vldr	d6, [r3, #16]
 8001140:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001144:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80012c8 <Make_PWM+0x2d0>
 8001148:	ee27 7b06 	vmul.f64	d7, d7, d6
 800114c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001150:	ee17 3a90 	vmov	r3, s15
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <Make_PWM+0x2e0>)
 8001158:	809a      	strh	r2, [r3, #4]
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001160:	4862      	ldr	r0, [pc, #392]	; (80012ec <Make_PWM+0x2f4>)
 8001162:	f002 fa49 	bl	80035f8 <HAL_GPIO_WritePin>
       TIM12-> CCR2 = Motor_CCR[2];
 8001166:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <Make_PWM+0x2e0>)
 8001168:	889b      	ldrh	r3, [r3, #4]
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b60      	ldr	r3, [pc, #384]	; (80012f0 <Make_PWM+0x2f8>)
 800116e:	639a      	str	r2, [r3, #56]	; 0x38
 8001170:	e01d      	b.n	80011ae <Make_PWM+0x1b6>
    }
    else
    {
       Motor_CCR[2] = (double)((Vel_Ctrl_Out[2] / Vel_Max[2]) * 4119);
 8001172:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <Make_PWM+0x2d8>)
 8001174:	ed93 5b04 	vldr	d5, [r3, #16]
 8001178:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <Make_PWM+0x2dc>)
 800117a:	ed93 6b04 	vldr	d6, [r3, #16]
 800117e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001182:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80012c8 <Make_PWM+0x2d0>
 8001186:	ee27 7b06 	vmul.f64	d7, d7, d6
 800118a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800118e:	ee17 3a90 	vmov	r3, s15
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <Make_PWM+0x2e0>)
 8001196:	809a      	strh	r2, [r3, #4]
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119e:	4853      	ldr	r0, [pc, #332]	; (80012ec <Make_PWM+0x2f4>)
 80011a0:	f002 fa2a 	bl	80035f8 <HAL_GPIO_WritePin>
       TIM12 -> CCR2 = Motor_CCR[2];
 80011a4:	4b4c      	ldr	r3, [pc, #304]	; (80012d8 <Make_PWM+0x2e0>)
 80011a6:	889b      	ldrh	r3, [r3, #4]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <Make_PWM+0x2f8>)
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38
    }

	// Generate Motor PWM 3
	if(input_3 < 0)
 80011ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80011b2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d51f      	bpl.n	80011fc <Make_PWM+0x204>
	{
	   Motor_CCR[3] = (double)((-Vel_Ctrl_Out[3] / Vel_Max[3]) * 4119);
 80011bc:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <Make_PWM+0x2d8>)
 80011be:	ed93 7b06 	vldr	d7, [r3, #24]
 80011c2:	eeb1 5b47 	vneg.f64	d5, d7
 80011c6:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <Make_PWM+0x2dc>)
 80011c8:	ed93 6b06 	vldr	d6, [r3, #24]
 80011cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011d0:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80012c8 <Make_PWM+0x2d0>
 80011d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011dc:	ee17 3a90 	vmov	r3, s15
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <Make_PWM+0x2e0>)
 80011e4:	80da      	strh	r2, [r3, #6]
	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2120      	movs	r1, #32
 80011ea:	483e      	ldr	r0, [pc, #248]	; (80012e4 <Make_PWM+0x2ec>)
 80011ec:	f002 fa04 	bl	80035f8 <HAL_GPIO_WritePin>
	   TIM13-> CCR1 = Motor_CCR[3];
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <Make_PWM+0x2e0>)
 80011f2:	88db      	ldrh	r3, [r3, #6]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <Make_PWM+0x2fc>)
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
 80011fa:	e01c      	b.n	8001236 <Make_PWM+0x23e>
	}
	else
	{
	   Motor_CCR[3] = (double)((Vel_Ctrl_Out[3] / Vel_Max[3]) * 4119);
 80011fc:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <Make_PWM+0x2d8>)
 80011fe:	ed93 5b06 	vldr	d5, [r3, #24]
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <Make_PWM+0x2dc>)
 8001204:	ed93 6b06 	vldr	d6, [r3, #24]
 8001208:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800120c:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 80012c8 <Make_PWM+0x2d0>
 8001210:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001214:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001218:	ee17 3a90 	vmov	r3, s15
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <Make_PWM+0x2e0>)
 8001220:	80da      	strh	r2, [r3, #6]
	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2120      	movs	r1, #32
 8001226:	482f      	ldr	r0, [pc, #188]	; (80012e4 <Make_PWM+0x2ec>)
 8001228:	f002 f9e6 	bl	80035f8 <HAL_GPIO_WritePin>
	   TIM13 -> CCR1 = Motor_CCR[3];
 800122c:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <Make_PWM+0x2e0>)
 800122e:	88db      	ldrh	r3, [r3, #6]
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <Make_PWM+0x2fc>)
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
	}
	// Generate Motor PWM 4
    if(input_4 < 0)
 8001236:	ed97 7b00 	vldr	d7, [r7]
 800123a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	d51f      	bpl.n	8001284 <Make_PWM+0x28c>
    {
       Motor_CCR[4] = (double)((-Vel_Ctrl_Out[4] / Vel_Max[4]) * 4119);
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <Make_PWM+0x2d8>)
 8001246:	ed93 7b08 	vldr	d7, [r3, #32]
 800124a:	eeb1 5b47 	vneg.f64	d5, d7
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <Make_PWM+0x2dc>)
 8001250:	ed93 6b08 	vldr	d6, [r3, #32]
 8001254:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001258:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 80012c8 <Make_PWM+0x2d0>
 800125c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001260:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001264:	ee17 3a90 	vmov	r3, s15
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <Make_PWM+0x2e0>)
 800126c:	811a      	strh	r2, [r3, #8]
       HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2180      	movs	r1, #128	; 0x80
 8001272:	481a      	ldr	r0, [pc, #104]	; (80012dc <Make_PWM+0x2e4>)
 8001274:	f002 f9c0 	bl	80035f8 <HAL_GPIO_WritePin>
       TIM14-> CCR1 = Motor_CCR[4];
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <Make_PWM+0x2e0>)
 800127a:	891b      	ldrh	r3, [r3, #8]
 800127c:	b29a      	uxth	r2, r3
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <Make_PWM+0x300>)
 8001280:	635a      	str	r2, [r3, #52]	; 0x34
       HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
       TIM14 -> CCR1 = Motor_CCR[4];
    }


}
 8001282:	e01c      	b.n	80012be <Make_PWM+0x2c6>
       Motor_CCR[4] = (double)((Vel_Ctrl_Out[4] / Vel_Max[4]) * 4119);
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <Make_PWM+0x2d8>)
 8001286:	ed93 5b08 	vldr	d5, [r3, #32]
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <Make_PWM+0x2dc>)
 800128c:	ed93 6b08 	vldr	d6, [r3, #32]
 8001290:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001294:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80012c8 <Make_PWM+0x2d0>
 8001298:	ee27 7b06 	vmul.f64	d7, d7, d6
 800129c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012a0:	ee17 3a90 	vmov	r3, s15
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <Make_PWM+0x2e0>)
 80012a8:	811a      	strh	r2, [r3, #8]
       HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	480b      	ldr	r0, [pc, #44]	; (80012dc <Make_PWM+0x2e4>)
 80012b0:	f002 f9a2 	bl	80035f8 <HAL_GPIO_WritePin>
       TIM14 -> CCR1 = Motor_CCR[4];
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <Make_PWM+0x2e0>)
 80012b6:	891b      	ldrh	r3, [r3, #8]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <Make_PWM+0x300>)
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40b01700 	.word	0x40b01700
 80012d0:	20000dc0 	.word	0x20000dc0
 80012d4:	20000050 	.word	0x20000050
 80012d8:	20000c20 	.word	0x20000c20
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40000c00 	.word	0x40000c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40014800 	.word	0x40014800
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40001800 	.word	0x40001800
 80012f4:	40001c00 	.word	0x40001c00
 80012f8:	40002000 	.word	0x40002000

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001300:	f001 fb15 	bl	800292e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001304:	f000 f8b2 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001308:	f000 fd3e 	bl	8001d88 <MX_GPIO_Init>
  MX_ETH_Init();
 800130c:	f000 f918 	bl	8001540 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001310:	f000 fcdc 	bl	8001ccc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001314:	f000 fd0a 	bl	8001d2c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8001318:	f000 f960 	bl	80015dc <MX_TIM1_Init>
  MX_TIM2_Init();
 800131c:	f000 f9b8 	bl	8001690 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001320:	f000 fa0a 	bl	8001738 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001324:	f000 fa5e 	bl	80017e4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001328:	f000 fb0c 	bl	8001944 <MX_TIM8_Init>
  MX_TIM9_Init();
 800132c:	f000 fb64 	bl	80019f8 <MX_TIM9_Init>
  MX_TIM11_Init();
 8001330:	f000 fb9c 	bl	8001a6c <MX_TIM11_Init>
  MX_TIM12_Init();
 8001334:	f000 fbe8 	bl	8001b08 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001338:	f000 fc2c 	bl	8001b94 <MX_TIM13_Init>
  MX_TIM5_Init();
 800133c:	f000 faa8 	bl	8001890 <MX_TIM5_Init>
  MX_TIM14_Init();
 8001340:	f000 fc76 	bl	8001c30 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim9);
 8001344:	481f      	ldr	r0, [pc, #124]	; (80013c4 <main+0xc8>)
 8001346:	f003 fc4f 	bl	8004be8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800134a:	210c      	movs	r1, #12
 800134c:	481e      	ldr	r0, [pc, #120]	; (80013c8 <main+0xcc>)
 800134e:	f003 fd1b 	bl	8004d88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim5, TIM_CHANNEL_4);
 8001352:	210c      	movs	r1, #12
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <main+0xcc>)
 8001356:	f004 fe29 	bl	8005fac <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800135a:	2100      	movs	r1, #0
 800135c:	481b      	ldr	r0, [pc, #108]	; (80013cc <main+0xd0>)
 800135e:	f003 fd13 	bl	8004d88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim11, TIM_CHANNEL_1);
 8001362:	2100      	movs	r1, #0
 8001364:	4819      	ldr	r0, [pc, #100]	; (80013cc <main+0xd0>)
 8001366:	f004 fe21 	bl	8005fac <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800136a:	2104      	movs	r1, #4
 800136c:	4818      	ldr	r0, [pc, #96]	; (80013d0 <main+0xd4>)
 800136e:	f003 fd0b 	bl	8004d88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim12, TIM_CHANNEL_2);
 8001372:	2104      	movs	r1, #4
 8001374:	4816      	ldr	r0, [pc, #88]	; (80013d0 <main+0xd4>)
 8001376:	f004 fe19 	bl	8005fac <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800137a:	2100      	movs	r1, #0
 800137c:	4815      	ldr	r0, [pc, #84]	; (80013d4 <main+0xd8>)
 800137e:	f003 fd03 	bl	8004d88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim13, TIM_CHANNEL_1);
 8001382:	2100      	movs	r1, #0
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <main+0xd8>)
 8001386:	f004 fe11 	bl	8005fac <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800138a:	2100      	movs	r1, #0
 800138c:	4812      	ldr	r0, [pc, #72]	; (80013d8 <main+0xdc>)
 800138e:	f003 fcfb 	bl	8004d88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim14, TIM_CHANNEL_1);
 8001392:	2100      	movs	r1, #0
 8001394:	4810      	ldr	r0, [pc, #64]	; (80013d8 <main+0xdc>)
 8001396:	f004 fe09 	bl	8005fac <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800139a:	213c      	movs	r1, #60	; 0x3c
 800139c:	480f      	ldr	r0, [pc, #60]	; (80013dc <main+0xe0>)
 800139e:	f003 fe93 	bl	80050c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80013a2:	213c      	movs	r1, #60	; 0x3c
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <main+0xe4>)
 80013a6:	f003 fe8f 	bl	80050c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013aa:	213c      	movs	r1, #60	; 0x3c
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <main+0xe8>)
 80013ae:	f003 fe8b 	bl	80050c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80013b2:	213c      	movs	r1, #60	; 0x3c
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <main+0xec>)
 80013b6:	f003 fe87 	bl	80050c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80013ba:	213c      	movs	r1, #60	; 0x3c
 80013bc:	480b      	ldr	r0, [pc, #44]	; (80013ec <main+0xf0>)
 80013be:	f003 fe83 	bl	80050c8 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <main+0xc6>
 80013c4:	2000050c 	.word	0x2000050c
 80013c8:	20000474 	.word	0x20000474
 80013cc:	20000558 	.word	0x20000558
 80013d0:	200005a4 	.word	0x200005a4
 80013d4:	200005f0 	.word	0x200005f0
 80013d8:	2000063c 	.word	0x2000063c
 80013dc:	20000344 	.word	0x20000344
 80013e0:	20000390 	.word	0x20000390
 80013e4:	200003dc 	.word	0x200003dc
 80013e8:	20000428 	.word	0x20000428
 80013ec:	200004c0 	.word	0x200004c0

080013f0 <HAL_GPIO_EXTI_Callback>:

  }
  /* USER CODE END 3 */
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN_Pin)
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001400:	d123      	bne.n	800144a <HAL_GPIO_EXTI_Callback+0x5a>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);  // LED 모드 변경
 8001402:	2101      	movs	r1, #1
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <HAL_GPIO_EXTI_Callback+0x70>)
 8001406:	f002 f910 	bl	800362a <HAL_GPIO_TogglePin>
		if(mode == 0) mode = 1;
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_GPIO_EXTI_Callback+0x74>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <HAL_GPIO_EXTI_Callback+0x28>
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_GPIO_EXTI_Callback+0x74>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
		for(int i =0; i < 5; i++) g_ref[i] = 90 +  g_ref[i];
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e012      	b.n	8001444 <HAL_GPIO_EXTI_Callback+0x54>
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <HAL_GPIO_EXTI_Callback+0x78>)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	ed93 7b00 	vldr	d7, [r3]
 800142a:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8001458 <HAL_GPIO_EXTI_Callback+0x68>
 800142e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001432:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <HAL_GPIO_EXTI_Callback+0x78>)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	ed83 7b00 	vstr	d7, [r3]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3301      	adds	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b04      	cmp	r3, #4
 8001448:	dde9      	ble.n	800141e <HAL_GPIO_EXTI_Callback+0x2e>
	}
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	f3af 8000 	nop.w
 8001458:	00000000 	.word	0x00000000
 800145c:	40568000 	.word	0x40568000
 8001460:	40020400 	.word	0x40020400
 8001464:	20000c1c 	.word	0x20000c1c
 8001468:	20000c30 	.word	0x20000c30

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b094      	sub	sp, #80	; 0x50
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	2234      	movs	r2, #52	; 0x34
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f005 feaa 	bl	80071d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001490:	f002 fa46 	bl	8003920 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <SystemClock_Config+0xcc>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a27      	ldr	r2, [pc, #156]	; (8001538 <SystemClock_Config+0xcc>)
 800149a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <SystemClock_Config+0xcc>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014ac:	4b23      	ldr	r3, [pc, #140]	; (800153c <SystemClock_Config+0xd0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014b4:	4a21      	ldr	r2, [pc, #132]	; (800153c <SystemClock_Config+0xd0>)
 80014b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <SystemClock_Config+0xd0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d2:	2302      	movs	r3, #2
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014dc:	2304      	movs	r3, #4
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014e0:	23a8      	movs	r3, #168	; 0xa8
 80014e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014e8:	2307      	movs	r3, #7
 80014ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 fa23 	bl	8003940 <HAL_RCC_OscConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001500:	f000 fd2e 	bl	8001f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001504:	230f      	movs	r3, #15
 8001506:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001508:	2302      	movs	r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001514:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	2102      	movs	r1, #2
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fcbb 	bl	8003e9c <HAL_RCC_ClockConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800152c:	f000 fd18 	bl	8001f60 <Error_Handler>
  }
}
 8001530:	bf00      	nop
 8001532:	3750      	adds	r7, #80	; 0x50
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	40007000 	.word	0x40007000

08001540 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_ETH_Init+0x84>)
 8001546:	4a20      	ldr	r2, [pc, #128]	; (80015c8 <MX_ETH_Init+0x88>)
 8001548:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <MX_ETH_Init+0x8c>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_ETH_Init+0x8c>)
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_ETH_Init+0x8c>)
 8001558:	22e1      	movs	r2, #225	; 0xe1
 800155a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_ETH_Init+0x8c>)
 800155e:	2200      	movs	r2, #0
 8001560:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_ETH_Init+0x8c>)
 8001564:	2200      	movs	r2, #0
 8001566:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_ETH_Init+0x8c>)
 800156a:	2200      	movs	r2, #0
 800156c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_ETH_Init+0x84>)
 8001570:	4a16      	ldr	r2, [pc, #88]	; (80015cc <MX_ETH_Init+0x8c>)
 8001572:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <MX_ETH_Init+0x84>)
 8001576:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800157a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_ETH_Init+0x84>)
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <MX_ETH_Init+0x90>)
 8001580:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_ETH_Init+0x84>)
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <MX_ETH_Init+0x94>)
 8001586:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_ETH_Init+0x84>)
 800158a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800158e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <MX_ETH_Init+0x84>)
 8001592:	f001 fb5f 	bl	8002c54 <HAL_ETH_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800159c:	f000 fce0 	bl	8001f60 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80015a0:	2238      	movs	r2, #56	; 0x38
 80015a2:	2100      	movs	r1, #0
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <MX_ETH_Init+0x98>)
 80015a6:	f005 fe15 	bl	80071d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_ETH_Init+0x98>)
 80015ac:	2221      	movs	r2, #33	; 0x21
 80015ae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_ETH_Init+0x98>)
 80015b2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80015b6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_ETH_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000294 	.word	0x20000294
 80015c8:	40028000 	.word	0x40028000
 80015cc:	20000e90 	.word	0x20000e90
 80015d0:	2000019c 	.word	0x2000019c
 80015d4:	200000fc 	.word	0x200000fc
 80015d8:	2000025c 	.word	0x2000025c

080015dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	2224      	movs	r2, #36	; 0x24
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 fdf2 	bl	80071d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <MX_TIM1_Init+0xac>)
 80015fc:	4a23      	ldr	r2, [pc, #140]	; (800168c <MX_TIM1_Init+0xb0>)
 80015fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <MX_TIM1_Init+0xac>)
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <MX_TIM1_Init+0xac>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <MX_TIM1_Init+0xac>)
 800160e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001612:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_TIM1_Init+0xac>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <MX_TIM1_Init+0xac>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_TIM1_Init+0xac>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001626:	2303      	movs	r3, #3
 8001628:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800162e:	2301      	movs	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800163e:	2301      	movs	r3, #1
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	4619      	mov	r1, r3
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <MX_TIM1_Init+0xac>)
 8001652:	f003 fc93 	bl	8004f7c <HAL_TIM_Encoder_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800165c:	f000 fc80 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_TIM1_Init+0xac>)
 8001672:	f004 fd5d 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800167c:	f000 fc70 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3730      	adds	r7, #48	; 0x30
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000344 	.word	0x20000344
 800168c:	40010000 	.word	0x40010000

08001690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	; 0x30
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2224      	movs	r2, #36	; 0x24
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 fd98 	bl	80071d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	463b      	mov	r3, r7
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_TIM2_Init+0xa4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016d6:	2303      	movs	r3, #3
 80016d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016de:	2301      	movs	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ee:	2301      	movs	r3, #1
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <MX_TIM2_Init+0xa4>)
 8001702:	f003 fc3b 	bl	8004f7c <HAL_TIM_Encoder_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800170c:	f000 fc28 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_TIM2_Init+0xa4>)
 800171e:	f004 fd07 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001728:	f000 fc1a 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3730      	adds	r7, #48	; 0x30
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000390 	.word	0x20000390

08001738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	; 0x30
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	2224      	movs	r2, #36	; 0x24
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f005 fd44 	bl	80071d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	463b      	mov	r3, r7
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <MX_TIM3_Init+0xa4>)
 8001758:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <MX_TIM3_Init+0xa8>)
 800175a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <MX_TIM3_Init+0xa4>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <MX_TIM3_Init+0xa4>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001768:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <MX_TIM3_Init+0xa4>)
 800176a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_TIM3_Init+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <MX_TIM3_Init+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800177c:	2303      	movs	r3, #3
 800177e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001784:	2301      	movs	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001794:	2301      	movs	r3, #1
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4619      	mov	r1, r3
 80017a6:	480d      	ldr	r0, [pc, #52]	; (80017dc <MX_TIM3_Init+0xa4>)
 80017a8:	f003 fbe8 	bl	8004f7c <HAL_TIM_Encoder_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80017b2:	f000 fbd5 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017be:	463b      	mov	r3, r7
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <MX_TIM3_Init+0xa4>)
 80017c4:	f004 fcb4 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017ce:	f000 fbc7 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	3730      	adds	r7, #48	; 0x30
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200003dc 	.word	0x200003dc
 80017e0:	40000400 	.word	0x40000400

080017e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	2224      	movs	r2, #36	; 0x24
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 fcee 	bl	80071d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	463b      	mov	r3, r7
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <MX_TIM4_Init+0xa4>)
 8001804:	4a21      	ldr	r2, [pc, #132]	; (800188c <MX_TIM4_Init+0xa8>)
 8001806:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <MX_TIM4_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <MX_TIM4_Init+0xa4>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <MX_TIM4_Init+0xa4>)
 8001816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <MX_TIM4_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <MX_TIM4_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001828:	2303      	movs	r3, #3
 800182a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001830:	2301      	movs	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001840:	2301      	movs	r3, #1
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	480d      	ldr	r0, [pc, #52]	; (8001888 <MX_TIM4_Init+0xa4>)
 8001854:	f003 fb92 	bl	8004f7c <HAL_TIM_Encoder_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800185e:	f000 fb7f 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	4619      	mov	r1, r3
 800186e:	4806      	ldr	r0, [pc, #24]	; (8001888 <MX_TIM4_Init+0xa4>)
 8001870:	f004 fc5e 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800187a:	f000 fb71 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	3730      	adds	r7, #48	; 0x30
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000428 	.word	0x20000428
 800188c:	40000800 	.word	0x40000800

08001890 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	615a      	str	r2, [r3, #20]
 80018b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_TIM5_Init+0xac>)
 80018b6:	4a22      	ldr	r2, [pc, #136]	; (8001940 <MX_TIM5_Init+0xb0>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <MX_TIM5_Init+0xac>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <MX_TIM5_Init+0xac>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_TIM5_Init+0xac>)
 80018c8:	f241 0267 	movw	r2, #4199	; 0x1067
 80018cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <MX_TIM5_Init+0xac>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_TIM5_Init+0xac>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <MX_TIM5_Init+0xac>)
 80018dc:	f003 f9fc 	bl	8004cd8 <HAL_TIM_PWM_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80018e6:	f000 fb3b 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4810      	ldr	r0, [pc, #64]	; (800193c <MX_TIM5_Init+0xac>)
 80018fa:	f004 fc19 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001904:	f000 fb2c 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001908:	2360      	movs	r3, #96	; 0x60
 800190a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	220c      	movs	r2, #12
 800191c:	4619      	mov	r1, r3
 800191e:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_TIM5_Init+0xac>)
 8001920:	f003 fd80 	bl	8005424 <HAL_TIM_PWM_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800192a:	f000 fb19 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800192e:	4803      	ldr	r0, [pc, #12]	; (800193c <MX_TIM5_Init+0xac>)
 8001930:	f000 fdda 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000474 	.word	0x20000474
 8001940:	40000c00 	.word	0x40000c00

08001944 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	; 0x30
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	2224      	movs	r2, #36	; 0x24
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f005 fc3e 	bl	80071d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <MX_TIM8_Init+0xac>)
 8001964:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <MX_TIM8_Init+0xb0>)
 8001966:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <MX_TIM8_Init+0xac>)
 800196a:	2200      	movs	r2, #0
 800196c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <MX_TIM8_Init+0xac>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <MX_TIM8_Init+0xac>)
 8001976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800197a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <MX_TIM8_Init+0xac>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <MX_TIM8_Init+0xac>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <MX_TIM8_Init+0xac>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800198e:	2303      	movs	r3, #3
 8001990:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001996:	2301      	movs	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019a6:	2301      	movs	r3, #1
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4619      	mov	r1, r3
 80019b8:	480d      	ldr	r0, [pc, #52]	; (80019f0 <MX_TIM8_Init+0xac>)
 80019ba:	f003 fadf 	bl	8004f7c <HAL_TIM_Encoder_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80019c4:	f000 facc 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_TIM8_Init+0xac>)
 80019da:	f004 fba9 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80019e4:	f000 fabc 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	3730      	adds	r7, #48	; 0x30
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200004c0 	.word	0x200004c0
 80019f4:	40010400 	.word	0x40010400

080019f8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	463b      	mov	r3, r7
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_TIM9_Init+0x6c>)
 8001a0c:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <MX_TIM9_Init+0x70>)
 8001a0e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 840-1;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_TIM9_Init+0x6c>)
 8001a12:	f240 3247 	movw	r2, #839	; 0x347
 8001a16:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_TIM9_Init+0x6c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 50-1;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_TIM9_Init+0x6c>)
 8001a20:	2231      	movs	r2, #49	; 0x31
 8001a22:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_TIM9_Init+0x6c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_TIM9_Init+0x6c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_TIM9_Init+0x6c>)
 8001a32:	f003 f881 	bl	8004b38 <HAL_TIM_Base_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001a3c:	f000 fa90 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	; (8001a64 <MX_TIM9_Init+0x6c>)
 8001a4c:	f003 fdfe 	bl	800564c <HAL_TIM_ConfigClockSource>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001a56:	f000 fa83 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000050c 	.word	0x2000050c
 8001a68:	40014000 	.word	0x40014000

08001a6c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]
 8001a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <MX_TIM11_Init+0x94>)
 8001a86:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <MX_TIM11_Init+0x98>)
 8001a88:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <MX_TIM11_Init+0x94>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <MX_TIM11_Init+0x94>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4200-1;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <MX_TIM11_Init+0x94>)
 8001a98:	f241 0267 	movw	r2, #4199	; 0x1067
 8001a9c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <MX_TIM11_Init+0x94>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_TIM11_Init+0x94>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001aaa:	4815      	ldr	r0, [pc, #84]	; (8001b00 <MX_TIM11_Init+0x94>)
 8001aac:	f003 f844 	bl	8004b38 <HAL_TIM_Base_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001ab6:	f000 fa53 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001aba:	4811      	ldr	r0, [pc, #68]	; (8001b00 <MX_TIM11_Init+0x94>)
 8001abc:	f003 f90c 	bl	8004cd8 <HAL_TIM_PWM_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001ac6:	f000 fa4b 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aca:	2360      	movs	r3, #96	; 0x60
 8001acc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4807      	ldr	r0, [pc, #28]	; (8001b00 <MX_TIM11_Init+0x94>)
 8001ae2:	f003 fc9f 	bl	8005424 <HAL_TIM_PWM_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001aec:	f000 fa38 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001af0:	4803      	ldr	r0, [pc, #12]	; (8001b00 <MX_TIM11_Init+0x94>)
 8001af2:	f000 fcf9 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000558 	.word	0x20000558
 8001b04:	40014800 	.word	0x40014800

08001b08 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_TIM12_Init+0x84>)
 8001b22:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <MX_TIM12_Init+0x88>)
 8001b24:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <MX_TIM12_Init+0x84>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_TIM12_Init+0x84>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4200-1;
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <MX_TIM12_Init+0x84>)
 8001b34:	f241 0267 	movw	r2, #4199	; 0x1067
 8001b38:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_TIM12_Init+0x84>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_TIM12_Init+0x84>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b46:	4811      	ldr	r0, [pc, #68]	; (8001b8c <MX_TIM12_Init+0x84>)
 8001b48:	f003 f8c6 	bl	8004cd8 <HAL_TIM_PWM_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001b52:	f000 fa05 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b56:	2360      	movs	r3, #96	; 0x60
 8001b58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2204      	movs	r2, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4807      	ldr	r0, [pc, #28]	; (8001b8c <MX_TIM12_Init+0x84>)
 8001b6e:	f003 fc59 	bl	8005424 <HAL_TIM_PWM_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001b78:	f000 f9f2 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <MX_TIM12_Init+0x84>)
 8001b7e:	f000 fcb3 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 8001b82:	bf00      	nop
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200005a4 	.word	0x200005a4
 8001b90:	40001800 	.word	0x40001800

08001b94 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
 8001ba8:	615a      	str	r2, [r3, #20]
 8001baa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <MX_TIM13_Init+0x94>)
 8001bae:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <MX_TIM13_Init+0x98>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <MX_TIM13_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MX_TIM13_Init+0x94>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4200-1;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_TIM13_Init+0x94>)
 8001bc0:	f241 0267 	movw	r2, #4199	; 0x1067
 8001bc4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_TIM13_Init+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <MX_TIM13_Init+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001bd2:	4815      	ldr	r0, [pc, #84]	; (8001c28 <MX_TIM13_Init+0x94>)
 8001bd4:	f002 ffb0 	bl	8004b38 <HAL_TIM_Base_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001bde:	f000 f9bf 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001be2:	4811      	ldr	r0, [pc, #68]	; (8001c28 <MX_TIM13_Init+0x94>)
 8001be4:	f003 f878 	bl	8004cd8 <HAL_TIM_PWM_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001bee:	f000 f9b7 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf2:	2360      	movs	r3, #96	; 0x60
 8001bf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	4619      	mov	r1, r3
 8001c08:	4807      	ldr	r0, [pc, #28]	; (8001c28 <MX_TIM13_Init+0x94>)
 8001c0a:	f003 fc0b 	bl	8005424 <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001c14:	f000 f9a4 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <MX_TIM13_Init+0x94>)
 8001c1a:	f000 fc65 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 8001c1e:	bf00      	nop
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200005f0 	.word	0x200005f0
 8001c2c:	40001c00 	.word	0x40001c00

08001c30 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <MX_TIM14_Init+0x94>)
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <MX_TIM14_Init+0x98>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <MX_TIM14_Init+0x94>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <MX_TIM14_Init+0x94>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4200-1;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <MX_TIM14_Init+0x94>)
 8001c5c:	f241 0267 	movw	r2, #4199	; 0x1067
 8001c60:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_TIM14_Init+0x94>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_TIM14_Init+0x94>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001c6e:	4815      	ldr	r0, [pc, #84]	; (8001cc4 <MX_TIM14_Init+0x94>)
 8001c70:	f002 ff62 	bl	8004b38 <HAL_TIM_Base_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001c7a:	f000 f971 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001c7e:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <MX_TIM14_Init+0x94>)
 8001c80:	f003 f82a 	bl	8004cd8 <HAL_TIM_PWM_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001c8a:	f000 f969 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8e:	2360      	movs	r3, #96	; 0x60
 8001c90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <MX_TIM14_Init+0x94>)
 8001ca6:	f003 fbbd 	bl	8005424 <HAL_TIM_PWM_ConfigChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001cb0:	f000 f956 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <MX_TIM14_Init+0x94>)
 8001cb6:	f000 fc17 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 8001cba:	bf00      	nop
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000063c 	.word	0x2000063c
 8001cc8:	40002000 	.word	0x40002000

08001ccc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_USART3_UART_Init+0x58>)
 8001cd2:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <MX_USART3_UART_Init+0x5c>)
 8001cd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <MX_USART3_UART_Init+0x58>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_USART3_UART_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_USART3_UART_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_USART3_UART_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_USART3_UART_Init+0x58>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <MX_USART3_UART_Init+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_USART3_UART_Init+0x58>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <MX_USART3_UART_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_USART3_UART_Init+0x58>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_USART3_UART_Init+0x58>)
 8001d10:	f004 fadf 	bl	80062d2 <HAL_UART_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d1a:	f000 f921 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000688 	.word	0x20000688
 8001d28:	40004800 	.word	0x40004800

08001d2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d3a:	2206      	movs	r2, #6
 8001d3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d40:	2202      	movs	r2, #2
 8001d42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d70:	f001 fc8e 	bl	8003690 <HAL_PCD_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d7a:	f000 f8f1 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000710 	.word	0x20000710

08001d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	; 0x38
 8001d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d9e:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a69      	ldr	r2, [pc, #420]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001da4:	f043 0310 	orr.w	r3, r3, #16
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db6:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a63      	ldr	r2, [pc, #396]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dce:	4b5e      	ldr	r3, [pc, #376]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a5d      	ldr	r2, [pc, #372]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dd4:	f043 0320 	orr.w	r3, r3, #32
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b5b      	ldr	r3, [pc, #364]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de6:	4b58      	ldr	r3, [pc, #352]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a57      	ldr	r2, [pc, #348]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b55      	ldr	r3, [pc, #340]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	4b52      	ldr	r3, [pc, #328]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a51      	ldr	r2, [pc, #324]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a4b      	ldr	r2, [pc, #300]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2e:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a45      	ldr	r2, [pc, #276]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e34:	f043 0308 	orr.w	r3, r3, #8
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e46:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a3f      	ldr	r2, [pc, #252]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b3d      	ldr	r3, [pc, #244]	; (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2168      	movs	r1, #104	; 0x68
 8001e62:	483a      	ldr	r0, [pc, #232]	; (8001f4c <MX_GPIO_Init+0x1c4>)
 8001e64:	f001 fbc8 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_12|LD2_Pin, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f241 0181 	movw	r1, #4225	; 0x1081
 8001e6e:	4838      	ldr	r0, [pc, #224]	; (8001f50 <MX_GPIO_Init+0x1c8>)
 8001e70:	f001 fbc2 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2140      	movs	r1, #64	; 0x40
 8001e78:	4836      	ldr	r0, [pc, #216]	; (8001f54 <MX_GPIO_Init+0x1cc>)
 8001e7a:	f001 fbbd 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	4835      	ldr	r0, [pc, #212]	; (8001f58 <MX_GPIO_Init+0x1d0>)
 8001e84:	f001 fbb8 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8001e88:	2368      	movs	r3, #104	; 0x68
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	482b      	ldr	r0, [pc, #172]	; (8001f4c <MX_GPIO_Init+0x1c4>)
 8001ea0:	f001 f9fe 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4828      	ldr	r0, [pc, #160]	; (8001f5c <MX_GPIO_Init+0x1d4>)
 8001ebc:	f001 f9f0 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB12 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_12|LD2_Pin;
 8001ec0:	f241 0381 	movw	r3, #4225	; 0x1081
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	481d      	ldr	r0, [pc, #116]	; (8001f50 <MX_GPIO_Init+0x1c8>)
 8001eda:	f001 f9e1 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ede:	2340      	movs	r3, #64	; 0x40
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4817      	ldr	r0, [pc, #92]	; (8001f54 <MX_GPIO_Init+0x1cc>)
 8001ef6:	f001 f9d3 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4811      	ldr	r0, [pc, #68]	; (8001f54 <MX_GPIO_Init+0x1cc>)
 8001f0e:	f001 f9c7 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <MX_GPIO_Init+0x1d0>)
 8001f2a:	f001 f9b9 	bl	80032a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	2028      	movs	r0, #40	; 0x28
 8001f34:	f000 fe57 	bl	8002be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f38:	2028      	movs	r0, #40	; 0x28
 8001f3a:	f000 fe70 	bl	8002c1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f3e:	bf00      	nop
 8001f40:	3738      	adds	r7, #56	; 0x38
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40021800 	.word	0x40021800
 8001f58:	40020c00 	.word	0x40020c00
 8001f5c:	40020800 	.word	0x40020800

08001f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f64:	b672      	cpsid	i
}
 8001f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <Error_Handler+0x8>
	...

08001f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08e      	sub	sp, #56	; 0x38
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a4e      	ldr	r2, [pc, #312]	; (800210c <HAL_ETH_MspInit+0x158>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	f040 8096 	bne.w	8002104 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001fd8:	4b4d      	ldr	r3, [pc, #308]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4a4c      	ldr	r2, [pc, #304]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8001fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe4:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	623b      	str	r3, [r7, #32]
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	4b47      	ldr	r3, [pc, #284]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	4a46      	ldr	r2, [pc, #280]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8001ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffc:	4b44      	ldr	r3, [pc, #272]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	4a40      	ldr	r2, [pc, #256]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 800200e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002012:	6313      	str	r3, [r2, #48]	; 0x30
 8002014:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6313      	str	r3, [r2, #48]	; 0x30
 800202c:	4b38      	ldr	r3, [pc, #224]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a34      	ldr	r2, [pc, #208]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4a2e      	ldr	r2, [pc, #184]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	6313      	str	r3, [r2, #48]	; 0x30
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	4a28      	ldr	r2, [pc, #160]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 800206e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002072:	6313      	str	r3, [r2, #48]	; 0x30
 8002074:	4b26      	ldr	r3, [pc, #152]	; (8002110 <HAL_ETH_MspInit+0x15c>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002080:	2332      	movs	r3, #50	; 0x32
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002090:	230b      	movs	r3, #11
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	481e      	ldr	r0, [pc, #120]	; (8002114 <HAL_ETH_MspInit+0x160>)
 800209c:	f001 f900 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80020a0:	2386      	movs	r3, #134	; 0x86
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020b0:	230b      	movs	r3, #11
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	4619      	mov	r1, r3
 80020ba:	4817      	ldr	r0, [pc, #92]	; (8002118 <HAL_ETH_MspInit+0x164>)
 80020bc:	f001 f8f0 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80020c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020d2:	230b      	movs	r3, #11
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	4619      	mov	r1, r3
 80020dc:	480f      	ldr	r0, [pc, #60]	; (800211c <HAL_ETH_MspInit+0x168>)
 80020de:	f001 f8df 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80020e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020f4:	230b      	movs	r3, #11
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4808      	ldr	r0, [pc, #32]	; (8002120 <HAL_ETH_MspInit+0x16c>)
 8002100:	f001 f8ce 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002104:	bf00      	nop
 8002106:	3738      	adds	r7, #56	; 0x38
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40028000 	.word	0x40028000
 8002110:	40023800 	.word	0x40023800
 8002114:	40020800 	.word	0x40020800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40021800 	.word	0x40021800

08002124 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b094      	sub	sp, #80	; 0x50
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a94      	ldr	r2, [pc, #592]	; (8002394 <HAL_TIM_Encoder_MspInit+0x270>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d131      	bne.n	80021aa <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002146:	4b94      	ldr	r3, [pc, #592]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a93      	ldr	r2, [pc, #588]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b91      	ldr	r3, [pc, #580]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	63bb      	str	r3, [r7, #56]	; 0x38
 800215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800215e:	4b8e      	ldr	r3, [pc, #568]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a8d      	ldr	r2, [pc, #564]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002164:	f043 0310 	orr.w	r3, r3, #16
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b8b      	ldr	r3, [pc, #556]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002176:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002188:	2301      	movs	r3, #1
 800218a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800218c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002190:	4619      	mov	r1, r3
 8002192:	4882      	ldr	r0, [pc, #520]	; (800239c <HAL_TIM_Encoder_MspInit+0x278>)
 8002194:	f001 f884 	bl	80032a0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	2100      	movs	r1, #0
 800219c:	2018      	movs	r0, #24
 800219e:	f000 fd22 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80021a2:	2018      	movs	r0, #24
 80021a4:	f000 fd3b 	bl	8002c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80021a8:	e0ef      	b.n	800238a <HAL_TIM_Encoder_MspInit+0x266>
  else if(htim_encoder->Instance==TIM2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b2:	d144      	bne.n	800223e <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b4:	4b78      	ldr	r3, [pc, #480]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	4a77      	ldr	r2, [pc, #476]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6413      	str	r3, [r2, #64]	; 0x40
 80021c0:	4b75      	ldr	r3, [pc, #468]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	4b72      	ldr	r3, [pc, #456]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4a71      	ldr	r2, [pc, #452]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6313      	str	r3, [r2, #48]	; 0x30
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4a6b      	ldr	r2, [pc, #428]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	6313      	str	r3, [r2, #48]	; 0x30
 80021f0:	4b69      	ldr	r3, [pc, #420]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021fc:	2301      	movs	r3, #1
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800220c:	2301      	movs	r3, #1
 800220e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002214:	4619      	mov	r1, r3
 8002216:	4862      	ldr	r0, [pc, #392]	; (80023a0 <HAL_TIM_Encoder_MspInit+0x27c>)
 8002218:	f001 f842 	bl	80032a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800221c:	2308      	movs	r3, #8
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800222c:	2301      	movs	r3, #1
 800222e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002234:	4619      	mov	r1, r3
 8002236:	485b      	ldr	r0, [pc, #364]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x280>)
 8002238:	f001 f832 	bl	80032a0 <HAL_GPIO_Init>
}
 800223c:	e0a5      	b.n	800238a <HAL_TIM_Encoder_MspInit+0x266>
  else if(htim_encoder->Instance==TIM3)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a59      	ldr	r2, [pc, #356]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x284>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d144      	bne.n	80022d2 <HAL_TIM_Encoder_MspInit+0x1ae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 800224e:	f043 0302 	orr.w	r3, r3, #2
 8002252:	6413      	str	r3, [r2, #64]	; 0x40
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4a4c      	ldr	r2, [pc, #304]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6313      	str	r3, [r2, #48]	; 0x30
 800226c:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	623b      	str	r3, [r7, #32]
 8002276:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002278:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	4a46      	ldr	r2, [pc, #280]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	6313      	str	r3, [r2, #48]	; 0x30
 8002284:	4b44      	ldr	r3, [pc, #272]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002290:	2340      	movs	r3, #64	; 0x40
 8002292:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022a0:	2302      	movs	r3, #2
 80022a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022a8:	4619      	mov	r1, r3
 80022aa:	483d      	ldr	r0, [pc, #244]	; (80023a0 <HAL_TIM_Encoder_MspInit+0x27c>)
 80022ac:	f000 fff8 	bl	80032a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022b0:	2320      	movs	r3, #32
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022c0:	2302      	movs	r3, #2
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022c8:	4619      	mov	r1, r3
 80022ca:	4836      	ldr	r0, [pc, #216]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x280>)
 80022cc:	f000 ffe8 	bl	80032a0 <HAL_GPIO_Init>
}
 80022d0:	e05b      	b.n	800238a <HAL_TIM_Encoder_MspInit+0x266>
  else if(htim_encoder->Instance==TIM4)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a35      	ldr	r2, [pc, #212]	; (80023ac <HAL_TIM_Encoder_MspInit+0x288>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d129      	bne.n	8002330 <HAL_TIM_Encoder_MspInit+0x20c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	4a27      	ldr	r2, [pc, #156]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800230c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002310:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800231e:	2302      	movs	r3, #2
 8002320:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002322:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002326:	4619      	mov	r1, r3
 8002328:	4821      	ldr	r0, [pc, #132]	; (80023b0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800232a:	f000 ffb9 	bl	80032a0 <HAL_GPIO_Init>
}
 800232e:	e02c      	b.n	800238a <HAL_TIM_Encoder_MspInit+0x266>
  else if(htim_encoder->Instance==TIM8)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x290>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d127      	bne.n	800238a <HAL_TIM_Encoder_MspInit+0x266>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4a16      	ldr	r2, [pc, #88]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a10      	ldr	r2, [pc, #64]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_TIM_Encoder_MspInit+0x274>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800236a:	23c0      	movs	r3, #192	; 0xc0
 800236c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800237a:	2303      	movs	r3, #3
 800237c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800237e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002382:	4619      	mov	r1, r3
 8002384:	480c      	ldr	r0, [pc, #48]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x294>)
 8002386:	f000 ff8b 	bl	80032a0 <HAL_GPIO_Init>
}
 800238a:	bf00      	nop
 800238c:	3750      	adds	r7, #80	; 0x50
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40010000 	.word	0x40010000
 8002398:	40023800 	.word	0x40023800
 800239c:	40021000 	.word	0x40021000
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40000800 	.word	0x40000800
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	40010400 	.word	0x40010400
 80023b8:	40020800 	.word	0x40020800

080023bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a13      	ldr	r2, [pc, #76]	; (8002418 <HAL_TIM_PWM_MspInit+0x5c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10c      	bne.n	80023e8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_TIM_PWM_MspInit+0x60>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <HAL_TIM_PWM_MspInit+0x60>)
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_TIM_PWM_MspInit+0x60>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80023e6:	e010      	b.n	800240a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM12)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_TIM_PWM_MspInit+0x64>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10b      	bne.n	800240a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_TIM_PWM_MspInit+0x60>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_TIM_PWM_MspInit+0x60>)
 80023f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <HAL_TIM_PWM_MspInit+0x60>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40000c00 	.word	0x40000c00
 800241c:	40023800 	.word	0x40023800
 8002420:	40001800 	.word	0x40001800

08002424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <HAL_TIM_Base_MspInit+0xb0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d114      	bne.n	8002460 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002436:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a27      	ldr	r2, [pc, #156]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	2018      	movs	r0, #24
 8002454:	f000 fbc7 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002458:	2018      	movs	r0, #24
 800245a:	f000 fbe0 	bl	8002c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800245e:	e034      	b.n	80024ca <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_TIM_Base_MspInit+0xb8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10c      	bne.n	8002484 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002474:	6453      	str	r3, [r2, #68]	; 0x44
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]
}
 8002482:	e022      	b.n	80024ca <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <HAL_TIM_Base_MspInit+0xbc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10c      	bne.n	80024a8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002498:	6413      	str	r3, [r2, #64]	; 0x40
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
}
 80024a6:	e010      	b.n	80024ca <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10b      	bne.n	80024ca <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_TIM_Base_MspInit+0xb4>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40014000 	.word	0x40014000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40014800 	.word	0x40014800
 80024e0:	40001c00 	.word	0x40001c00
 80024e4:	40002000 	.word	0x40002000

080024e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08c      	sub	sp, #48	; 0x30
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a56      	ldr	r2, [pc, #344]	; (8002660 <HAL_TIM_MspPostInit+0x178>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d11c      	bne.n	8002544 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	4b56      	ldr	r3, [pc, #344]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a55      	ldr	r2, [pc, #340]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b53      	ldr	r3, [pc, #332]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	61bb      	str	r3, [r7, #24]
 8002520:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002522:	2308      	movs	r3, #8
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002532:	2302      	movs	r3, #2
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	484a      	ldr	r0, [pc, #296]	; (8002668 <HAL_TIM_MspPostInit+0x180>)
 800253e:	f000 feaf 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002542:	e089      	b.n	8002658 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM11)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_TIM_MspPostInit+0x184>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d11c      	bne.n	8002588 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800254e:	4b45      	ldr	r3, [pc, #276]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a44      	ldr	r2, [pc, #272]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 8002554:	f043 0320 	orr.w	r3, r3, #32
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002576:	2303      	movs	r3, #3
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800257a:	f107 031c 	add.w	r3, r7, #28
 800257e:	4619      	mov	r1, r3
 8002580:	483b      	ldr	r0, [pc, #236]	; (8002670 <HAL_TIM_MspPostInit+0x188>)
 8002582:	f000 fe8d 	bl	80032a0 <HAL_GPIO_Init>
}
 8002586:	e067      	b.n	8002658 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM12)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a39      	ldr	r2, [pc, #228]	; (8002674 <HAL_TIM_MspPostInit+0x18c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d11d      	bne.n	80025ce <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002592:	4b34      	ldr	r3, [pc, #208]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a33      	ldr	r2, [pc, #204]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80025bc:	2309      	movs	r3, #9
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	482c      	ldr	r0, [pc, #176]	; (8002678 <HAL_TIM_MspPostInit+0x190>)
 80025c8:	f000 fe6a 	bl	80032a0 <HAL_GPIO_Init>
}
 80025cc:	e044      	b.n	8002658 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM13)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2a      	ldr	r2, [pc, #168]	; (800267c <HAL_TIM_MspPostInit+0x194>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d11d      	bne.n	8002614 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	4a21      	ldr	r2, [pc, #132]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 80025de:	f043 0320 	orr.w	r3, r3, #32
 80025e2:	6313      	str	r3, [r2, #48]	; 0x30
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002602:	2309      	movs	r3, #9
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	4619      	mov	r1, r3
 800260c:	4818      	ldr	r0, [pc, #96]	; (8002670 <HAL_TIM_MspPostInit+0x188>)
 800260e:	f000 fe47 	bl	80032a0 <HAL_GPIO_Init>
}
 8002612:	e021      	b.n	8002658 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM14)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a19      	ldr	r2, [pc, #100]	; (8002680 <HAL_TIM_MspPostInit+0x198>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d11c      	bne.n	8002658 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 8002624:	f043 0320 	orr.w	r3, r3, #32
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_TIM_MspPostInit+0x17c>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002648:	2309      	movs	r3, #9
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	4807      	ldr	r0, [pc, #28]	; (8002670 <HAL_TIM_MspPostInit+0x188>)
 8002654:	f000 fe24 	bl	80032a0 <HAL_GPIO_Init>
}
 8002658:	bf00      	nop
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40000c00 	.word	0x40000c00
 8002664:	40023800 	.word	0x40023800
 8002668:	40020000 	.word	0x40020000
 800266c:	40014800 	.word	0x40014800
 8002670:	40021400 	.word	0x40021400
 8002674:	40001800 	.word	0x40001800
 8002678:	40020400 	.word	0x40020400
 800267c:	40001c00 	.word	0x40001c00
 8002680:	40002000 	.word	0x40002000

08002684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b0ae      	sub	sp, #184	; 0xb8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	2290      	movs	r2, #144	; 0x90
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f004 fd95 	bl	80071d4 <memset>
  if(huart->Instance==USART3)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a22      	ldr	r2, [pc, #136]	; (8002738 <HAL_UART_MspInit+0xb4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d13c      	bne.n	800272e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026ba:	2300      	movs	r3, #0
 80026bc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 fe10 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80026ce:	f7ff fc47 	bl	8001f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <HAL_UART_MspInit+0xb8>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_UART_MspInit+0xb8>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_UART_MspInit+0xb8>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_UART_MspInit+0xb8>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a13      	ldr	r2, [pc, #76]	; (800273c <HAL_UART_MspInit+0xb8>)
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_UART_MspInit+0xb8>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002702:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800271c:	2307      	movs	r3, #7
 800271e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002722:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002726:	4619      	mov	r1, r3
 8002728:	4805      	ldr	r0, [pc, #20]	; (8002740 <HAL_UART_MspInit+0xbc>)
 800272a:	f000 fdb9 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800272e:	bf00      	nop
 8002730:	37b8      	adds	r7, #184	; 0xb8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40004800 	.word	0x40004800
 800273c:	40023800 	.word	0x40023800
 8002740:	40020c00 	.word	0x40020c00

08002744 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b0ae      	sub	sp, #184	; 0xb8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2290      	movs	r2, #144	; 0x90
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f004 fd35 	bl	80071d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002772:	d159      	bne.n	8002828 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002774:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002778:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800277a:	2300      	movs	r3, #0
 800277c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	4618      	mov	r0, r3
 8002786:	f001 fdaf 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002790:	f7ff fbe6 	bl	8001f60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_PCD_MspInit+0xec>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	4a25      	ldr	r2, [pc, #148]	; (8002830 <HAL_PCD_MspInit+0xec>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6313      	str	r3, [r2, #48]	; 0x30
 80027a0:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_PCD_MspInit+0xec>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80027ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80027b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027c6:	230a      	movs	r3, #10
 80027c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027d0:	4619      	mov	r1, r3
 80027d2:	4818      	ldr	r0, [pc, #96]	; (8002834 <HAL_PCD_MspInit+0xf0>)
 80027d4:	f000 fd64 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80027d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80027ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027f0:	4619      	mov	r1, r3
 80027f2:	4810      	ldr	r0, [pc, #64]	; (8002834 <HAL_PCD_MspInit+0xf0>)
 80027f4:	f000 fd54 	bl	80032a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80027f8:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_PCD_MspInit+0xec>)
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <HAL_PCD_MspInit+0xec>)
 80027fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002802:	6353      	str	r3, [r2, #52]	; 0x34
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_PCD_MspInit+0xec>)
 8002806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_PCD_MspInit+0xec>)
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	4a06      	ldr	r2, [pc, #24]	; (8002830 <HAL_PCD_MspInit+0xec>)
 8002816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281a:	6453      	str	r3, [r2, #68]	; 0x44
 800281c:	4b04      	ldr	r3, [pc, #16]	; (8002830 <HAL_PCD_MspInit+0xec>)
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002828:	bf00      	nop
 800282a:	37b8      	adds	r7, #184	; 0xb8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40023800 	.word	0x40023800
 8002834:	40020000 	.word	0x40020000

08002838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800283c:	e7fe      	b.n	800283c <NMI_Handler+0x4>

0800283e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002842:	e7fe      	b.n	8002842 <HardFault_Handler+0x4>

08002844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <MemManage_Handler+0x4>

0800284a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800284e:	e7fe      	b.n	800284e <BusFault_Handler+0x4>

08002850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <UsageFault_Handler+0x4>

08002856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002884:	f000 f890 	bl	80029a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}

0800288c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002890:	4803      	ldr	r0, [pc, #12]	; (80028a0 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002892:	f002 fca7 	bl	80051e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002896:	4803      	ldr	r0, [pc, #12]	; (80028a4 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002898:	f002 fca4 	bl	80051e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000344 	.word	0x20000344
 80028a4:	2000050c 	.word	0x2000050c

080028a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80028ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028b0:	f000 fed6 	bl	8003660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <SystemInit+0x20>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <SystemInit+0x20>)
 80028c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028e0:	480d      	ldr	r0, [pc, #52]	; (8002918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028e2:	490e      	ldr	r1, [pc, #56]	; (800291c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028e4:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028f8:	4c0b      	ldr	r4, [pc, #44]	; (8002928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002906:	f7ff ffd7 	bl	80028b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800290a:	f004 fc3f 	bl	800718c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800290e:	f7fe fcf5 	bl	80012fc <main>
  bx  lr    
 8002912:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002914:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800291c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002920:	08007224 	.word	0x08007224
  ldr r2, =_sbss
 8002924:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8002928:	20000e9c 	.word	0x20000e9c

0800292c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800292c:	e7fe      	b.n	800292c <ADC_IRQHandler>

0800292e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002932:	2003      	movs	r0, #3
 8002934:	f000 f94c 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002938:	2000      	movs	r0, #0
 800293a:	f000 f805 	bl	8002948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800293e:	f7ff fb15 	bl	8001f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_InitTick+0x54>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_InitTick+0x58>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f967 	bl	8002c3a <HAL_SYSTICK_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e00e      	b.n	8002994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b0f      	cmp	r3, #15
 800297a:	d80a      	bhi.n	8002992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800297c:	2200      	movs	r2, #0
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002984:	f000 f92f 	bl	8002be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002988:	4a06      	ldr	r2, [pc, #24]	; (80029a4 <HAL_InitTick+0x5c>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	200000f0 	.word	0x200000f0
 80029a0:	200000f8 	.word	0x200000f8
 80029a4:	200000f4 	.word	0x200000f4

080029a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_IncTick+0x20>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_IncTick+0x24>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_IncTick+0x24>)
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	200000f8 	.word	0x200000f8
 80029cc:	20000e98 	.word	0x20000e98

080029d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return uwTick;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_GetTick+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000e98 	.word	0x20000e98

080029e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff ffee 	bl	80029d0 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a00:	d005      	beq.n	8002a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_Delay+0x44>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a0e:	bf00      	nop
 8002a10:	f7ff ffde 	bl	80029d0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d8f7      	bhi.n	8002a10 <HAL_Delay+0x28>
  {
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200000f8 	.word	0x200000f8

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <__NVIC_SetPriorityGrouping+0x40>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <__NVIC_SetPriorityGrouping+0x40>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00
 8002a74:	05fa0000 	.word	0x05fa0000

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b9c:	d301      	bcc.n	8002ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <SysTick_Config+0x40>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bb0:	f7ff ff8e 	bl	8002ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <SysTick_Config+0x40>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <SysTick_Config+0x40>)
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff29 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf8:	f7ff ff3e 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	6978      	ldr	r0, [r7, #20]
 8002c04:	f7ff ff8e 	bl	8002b24 <NVIC_EncodePriority>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff5d 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff31 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ffa2 	bl	8002b8c <SysTick_Config>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06a      	b.n	8002d3c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2223      	movs	r2, #35	; 0x23
 8002c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff f99b 	bl	8001fb4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_ETH_Init+0xf0>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a30      	ldr	r2, [pc, #192]	; (8002d44 <HAL_ETH_Init+0xf0>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_ETH_Init+0xf0>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002c96:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <HAL_ETH_Init+0xf4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a2b      	ldr	r2, [pc, #172]	; (8002d48 <HAL_ETH_Init+0xf4>)
 8002c9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ca0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_ETH_Init+0xf4>)
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	4927      	ldr	r1, [pc, #156]	; (8002d48 <HAL_ETH_Init+0xf4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002cb0:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <HAL_ETH_Init+0xf4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ccc:	f7ff fe80 	bl	80029d0 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002cd2:	e011      	b.n	8002cf8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002cd4:	f7ff fe7c 	bl	80029d0 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ce2:	d909      	bls.n	8002cf8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	22e0      	movs	r2, #224	; 0xe0
 8002cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e021      	b.n	8002d3c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e4      	bne.n	8002cd4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f958 	bl	8002fc0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f9ff 	bl	8003114 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fa55 	bl	80031c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	461a      	mov	r2, r3
 8002d22:	2100      	movs	r1, #0
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f9bd 	bl	80030a4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2210      	movs	r2, #16
 8002d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40013800 	.word	0x40013800

08002d4c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4b51      	ldr	r3, [pc, #324]	; (8002ea8 <ETH_SetMACConfig+0x15c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	7c1b      	ldrb	r3, [r3, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <ETH_SetMACConfig+0x28>
 8002d6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d72:	e000      	b.n	8002d76 <ETH_SetMACConfig+0x2a>
 8002d74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	7c5b      	ldrb	r3, [r3, #17]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <ETH_SetMACConfig+0x38>
 8002d7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d82:	e000      	b.n	8002d86 <ETH_SetMACConfig+0x3a>
 8002d84:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d86:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	7fdb      	ldrb	r3, [r3, #31]
 8002d92:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002d94:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	7f92      	ldrb	r2, [r2, #30]
 8002da0:	2a00      	cmp	r2, #0
 8002da2:	d102      	bne.n	8002daa <ETH_SetMACConfig+0x5e>
 8002da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002da8:	e000      	b.n	8002dac <ETH_SetMACConfig+0x60>
 8002daa:	2200      	movs	r2, #0
                        macconf->Speed |
 8002dac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	7f1b      	ldrb	r3, [r3, #28]
 8002db2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002db4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	791b      	ldrb	r3, [r3, #4]
 8002dc0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002dc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002dca:	2a00      	cmp	r2, #0
 8002dcc:	d102      	bne.n	8002dd4 <ETH_SetMACConfig+0x88>
 8002dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd2:	e000      	b.n	8002dd6 <ETH_SetMACConfig+0x8a>
 8002dd4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002dd6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	7bdb      	ldrb	r3, [r3, #15]
 8002ddc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002dde:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002de4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dee:	4313      	orrs	r3, r2
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f7ff fdee 	bl	80029e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e22:	4013      	ands	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002e32:	2a00      	cmp	r2, #0
 8002e34:	d101      	bne.n	8002e3a <ETH_SetMACConfig+0xee>
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	e000      	b.n	8002e3c <ETH_SetMACConfig+0xf0>
 8002e3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e3c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002e4a:	2a01      	cmp	r2, #1
 8002e4c:	d101      	bne.n	8002e52 <ETH_SetMACConfig+0x106>
 8002e4e:	2208      	movs	r2, #8
 8002e50:	e000      	b.n	8002e54 <ETH_SetMACConfig+0x108>
 8002e52:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002e54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002e5c:	2a01      	cmp	r2, #1
 8002e5e:	d101      	bne.n	8002e64 <ETH_SetMACConfig+0x118>
 8002e60:	2204      	movs	r2, #4
 8002e62:	e000      	b.n	8002e66 <ETH_SetMACConfig+0x11a>
 8002e64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002e6e:	2a01      	cmp	r2, #1
 8002e70:	d101      	bne.n	8002e76 <ETH_SetMACConfig+0x12a>
 8002e72:	2202      	movs	r2, #2
 8002e74:	e000      	b.n	8002e78 <ETH_SetMACConfig+0x12c>
 8002e76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e90:	2001      	movs	r0, #1
 8002e92:	f7ff fda9 	bl	80029e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	ff20810f 	.word	0xff20810f

08002eac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <ETH_SetDMAConfig+0x110>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	7b1b      	ldrb	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <ETH_SetDMAConfig+0x2c>
 8002ed2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ed6:	e000      	b.n	8002eda <ETH_SetDMAConfig+0x2e>
 8002ed8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	7b5b      	ldrb	r3, [r3, #13]
 8002ede:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ee0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	7f52      	ldrb	r2, [r2, #29]
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	d102      	bne.n	8002ef0 <ETH_SetDMAConfig+0x44>
 8002eea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002eee:	e000      	b.n	8002ef2 <ETH_SetDMAConfig+0x46>
 8002ef0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ef2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	7b9b      	ldrb	r3, [r3, #14]
 8002ef8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002efa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	7f1b      	ldrb	r3, [r3, #28]
 8002f06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	7f9b      	ldrb	r3, [r3, #30]
 8002f0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f20:	4313      	orrs	r3, r2
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f30:	461a      	mov	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f42:	2001      	movs	r0, #1
 8002f44:	f7ff fd50 	bl	80029e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f50:	461a      	mov	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	791b      	ldrb	r3, [r3, #4]
 8002f5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002f66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002f76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	f7ff fd21 	bl	80029e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6013      	str	r3, [r2, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	f8de3f23 	.word	0xf8de3f23

08002fc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b0a6      	sub	sp, #152	; 0x98
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003006:	2300      	movs	r3, #0
 8003008:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003022:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003026:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800302c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800302e:	2300      	movs	r3, #0
 8003030:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003034:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fe86 	bl	8002d4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003040:	2301      	movs	r3, #1
 8003042:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003044:	2301      	movs	r3, #1
 8003046:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800304e:	2301      	movs	r3, #1
 8003050:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003062:	2300      	movs	r3, #0
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800306c:	2301      	movs	r3, #1
 800306e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003070:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003074:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800307a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800307c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003080:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003082:	2301      	movs	r3, #1
 8003084:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003088:	2300      	movs	r3, #0
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800308c:	2300      	movs	r3, #0
 800308e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003090:	f107 0308 	add.w	r3, r7, #8
 8003094:	4619      	mov	r1, r3
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ff08 	bl	8002eac <ETH_SetDMAConfig>
}
 800309c:	bf00      	nop
 800309e:	3798      	adds	r7, #152	; 0x98
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3305      	adds	r3, #5
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	3204      	adds	r2, #4
 80030bc:	7812      	ldrb	r2, [r2, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <ETH_MACAddressConfig+0x68>)
 80030c6:	4413      	add	r3, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3303      	adds	r3, #3
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	061a      	lsls	r2, r3, #24
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3302      	adds	r3, #2
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3301      	adds	r3, #1
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	4313      	orrs	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	7812      	ldrb	r2, [r2, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <ETH_MACAddressConfig+0x6c>)
 80030f6:	4413      	add	r3, r2
 80030f8:	461a      	mov	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	6013      	str	r3, [r2, #0]
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40028040 	.word	0x40028040
 8003110:	40028044 	.word	0x40028044

08003114 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e03e      	b.n	80031a0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2200      	movs	r2, #0
 800313e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	3206      	adds	r2, #6
 8003154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d80c      	bhi.n	8003184 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68d9      	ldr	r1, [r3, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	440b      	add	r3, r1
 800317c:	461a      	mov	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	e004      	b.n	800318e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3301      	adds	r3, #1
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d9bd      	bls.n	8003122 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b8:	611a      	str	r2, [r3, #16]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e046      	b.n	8003262 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6919      	ldr	r1, [r3, #16]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	440b      	add	r3, r1
 80031e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2200      	movs	r2, #0
 8003202:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2200      	movs	r2, #0
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003210:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003218:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	3212      	adds	r2, #18
 800322e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d80c      	bhi.n	8003252 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6919      	ldr	r1, [r3, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	e004      	b.n	800325c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	461a      	mov	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3301      	adds	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d9b5      	bls.n	80031d4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003292:	60da      	str	r2, [r3, #12]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e175      	b.n	80035ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032c0:	2201      	movs	r2, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	f040 8164 	bne.w	80035a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d005      	beq.n	80032f6 <HAL_GPIO_Init+0x56>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d130      	bne.n	8003358 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2203      	movs	r2, #3
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800332c:	2201      	movs	r2, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 0201 	and.w	r2, r3, #1
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b03      	cmp	r3, #3
 8003362:	d017      	beq.n	8003394 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2203      	movs	r2, #3
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d123      	bne.n	80033e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	08da      	lsrs	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3208      	adds	r2, #8
 80033a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220f      	movs	r2, #15
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	08da      	lsrs	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3208      	adds	r2, #8
 80033e2:	69b9      	ldr	r1, [r7, #24]
 80033e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2203      	movs	r2, #3
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0203 	and.w	r2, r3, #3
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80be 	beq.w	80035a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342a:	4b66      	ldr	r3, [pc, #408]	; (80035c4 <HAL_GPIO_Init+0x324>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	4a65      	ldr	r2, [pc, #404]	; (80035c4 <HAL_GPIO_Init+0x324>)
 8003430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003434:	6453      	str	r3, [r2, #68]	; 0x44
 8003436:	4b63      	ldr	r3, [pc, #396]	; (80035c4 <HAL_GPIO_Init+0x324>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003442:	4a61      	ldr	r2, [pc, #388]	; (80035c8 <HAL_GPIO_Init+0x328>)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	3302      	adds	r3, #2
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	220f      	movs	r2, #15
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a58      	ldr	r2, [pc, #352]	; (80035cc <HAL_GPIO_Init+0x32c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d037      	beq.n	80034de <HAL_GPIO_Init+0x23e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a57      	ldr	r2, [pc, #348]	; (80035d0 <HAL_GPIO_Init+0x330>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d031      	beq.n	80034da <HAL_GPIO_Init+0x23a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a56      	ldr	r2, [pc, #344]	; (80035d4 <HAL_GPIO_Init+0x334>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d02b      	beq.n	80034d6 <HAL_GPIO_Init+0x236>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a55      	ldr	r2, [pc, #340]	; (80035d8 <HAL_GPIO_Init+0x338>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d025      	beq.n	80034d2 <HAL_GPIO_Init+0x232>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a54      	ldr	r2, [pc, #336]	; (80035dc <HAL_GPIO_Init+0x33c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01f      	beq.n	80034ce <HAL_GPIO_Init+0x22e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a53      	ldr	r2, [pc, #332]	; (80035e0 <HAL_GPIO_Init+0x340>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d019      	beq.n	80034ca <HAL_GPIO_Init+0x22a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a52      	ldr	r2, [pc, #328]	; (80035e4 <HAL_GPIO_Init+0x344>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <HAL_GPIO_Init+0x226>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a51      	ldr	r2, [pc, #324]	; (80035e8 <HAL_GPIO_Init+0x348>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00d      	beq.n	80034c2 <HAL_GPIO_Init+0x222>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a50      	ldr	r2, [pc, #320]	; (80035ec <HAL_GPIO_Init+0x34c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <HAL_GPIO_Init+0x21e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4f      	ldr	r2, [pc, #316]	; (80035f0 <HAL_GPIO_Init+0x350>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_GPIO_Init+0x21a>
 80034b6:	2309      	movs	r3, #9
 80034b8:	e012      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034ba:	230a      	movs	r3, #10
 80034bc:	e010      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034be:	2308      	movs	r3, #8
 80034c0:	e00e      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034c2:	2307      	movs	r3, #7
 80034c4:	e00c      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034c6:	2306      	movs	r3, #6
 80034c8:	e00a      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034ca:	2305      	movs	r3, #5
 80034cc:	e008      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034ce:	2304      	movs	r3, #4
 80034d0:	e006      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034d2:	2303      	movs	r3, #3
 80034d4:	e004      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e002      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034de:	2300      	movs	r3, #0
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	f002 0203 	and.w	r2, r2, #3
 80034e6:	0092      	lsls	r2, r2, #2
 80034e8:	4093      	lsls	r3, r2
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034f0:	4935      	ldr	r1, [pc, #212]	; (80035c8 <HAL_GPIO_Init+0x328>)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	3302      	adds	r3, #2
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034fe:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_GPIO_Init+0x354>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003522:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <HAL_GPIO_Init+0x354>)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <HAL_GPIO_Init+0x354>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800354c:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <HAL_GPIO_Init+0x354>)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003552:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <HAL_GPIO_Init+0x354>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003576:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <HAL_GPIO_Init+0x354>)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_GPIO_Init+0x354>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035a0:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <HAL_GPIO_Init+0x354>)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3301      	adds	r3, #1
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b0f      	cmp	r3, #15
 80035b0:	f67f ae86 	bls.w	80032c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
 80035b8:	3724      	adds	r7, #36	; 0x24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40013800 	.word	0x40013800
 80035cc:	40020000 	.word	0x40020000
 80035d0:	40020400 	.word	0x40020400
 80035d4:	40020800 	.word	0x40020800
 80035d8:	40020c00 	.word	0x40020c00
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40021400 	.word	0x40021400
 80035e4:	40021800 	.word	0x40021800
 80035e8:	40021c00 	.word	0x40021c00
 80035ec:	40022000 	.word	0x40022000
 80035f0:	40022400 	.word	0x40022400
 80035f4:	40013c00 	.word	0x40013c00

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003614:	e003      	b.n	800361e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	041a      	lsls	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800363c:	887a      	ldrh	r2, [r7, #2]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	041a      	lsls	r2, r3, #16
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	43d9      	mvns	r1, r3
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	400b      	ands	r3, r1
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	619a      	str	r2, [r3, #24]
}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003676:	4a05      	ldr	r2, [pc, #20]	; (800368c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd feb6 	bl	80013f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40013c00 	.word	0x40013c00

08003690 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003692:	b08f      	sub	sp, #60	; 0x3c
 8003694:	af0a      	add	r7, sp, #40	; 0x28
 8003696:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e116      	b.n	80038d0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff f841 	bl	8002744 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2203      	movs	r2, #3
 80036c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f003 fab7 	bl	8006c54 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	687e      	ldr	r6, [r7, #4]
 80036ee:	466d      	mov	r5, sp
 80036f0:	f106 0410 	add.w	r4, r6, #16
 80036f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003700:	e885 0003 	stmia.w	r5, {r0, r1}
 8003704:	1d33      	adds	r3, r6, #4
 8003706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003708:	6838      	ldr	r0, [r7, #0]
 800370a:	f003 fa4b 	bl	8006ba4 <USB_CoreInit>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0d7      	b.n	80038d0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f003 faa5 	bl	8006c76 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]
 8003730:	e04a      	b.n	80037c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	333d      	adds	r3, #61	; 0x3d
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003746:	7bfa      	ldrb	r2, [r7, #15]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	333c      	adds	r3, #60	; 0x3c
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	b298      	uxth	r0, r3
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	3344      	adds	r3, #68	; 0x44
 800376e:	4602      	mov	r2, r0
 8003770:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3340      	adds	r3, #64	; 0x40
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3348      	adds	r3, #72	; 0x48
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800379a:	7bfa      	ldrb	r2, [r7, #15]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	334c      	adds	r3, #76	; 0x4c
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	3354      	adds	r3, #84	; 0x54
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	3301      	adds	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d3af      	bcc.n	8003732 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	e044      	b.n	8003862 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	3301      	adds	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	d3b5      	bcc.n	80037d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	687e      	ldr	r6, [r7, #4]
 8003874:	466d      	mov	r5, sp
 8003876:	f106 0410 	add.w	r4, r6, #16
 800387a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800387c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800387e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003882:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003886:	e885 0003 	stmia.w	r5, {r0, r1}
 800388a:	1d33      	adds	r3, r6, #4
 800388c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800388e:	6838      	ldr	r0, [r7, #0]
 8003890:	f003 fa3e 	bl	8006d10 <USB_DevInit>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2202      	movs	r2, #2
 800389e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e014      	b.n	80038d0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f80a 	bl	80038d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f003 fbfc 	bl	80070c6 <USB_DevDisconnect>

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_PCDEx_ActivateLPM+0x44>)
 8003908:	4313      	orrs	r3, r2
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	10000003 	.word	0x10000003

08003920 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a04      	ldr	r2, [pc, #16]	; (800393c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800392a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40007000 	.word	0x40007000

08003940 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003948:	2300      	movs	r3, #0
 800394a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e29b      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8087 	beq.w	8003a72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003964:	4b96      	ldr	r3, [pc, #600]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b04      	cmp	r3, #4
 800396e:	d00c      	beq.n	800398a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003970:	4b93      	ldr	r3, [pc, #588]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d112      	bne.n	80039a2 <HAL_RCC_OscConfig+0x62>
 800397c:	4b90      	ldr	r3, [pc, #576]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003988:	d10b      	bne.n	80039a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398a:	4b8d      	ldr	r3, [pc, #564]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d06c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x130>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d168      	bne.n	8003a70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e275      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x7a>
 80039ac:	4b84      	ldr	r3, [pc, #528]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a83      	ldr	r2, [pc, #524]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	e02e      	b.n	8003a18 <HAL_RCC_OscConfig+0xd8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x9c>
 80039c2:	4b7f      	ldr	r3, [pc, #508]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a7e      	ldr	r2, [pc, #504]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b7c      	ldr	r3, [pc, #496]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7b      	ldr	r2, [pc, #492]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <HAL_RCC_OscConfig+0xd8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0xc0>
 80039e6:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a75      	ldr	r2, [pc, #468]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a72      	ldr	r2, [pc, #456]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xd8>
 8003a00:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a6e      	ldr	r2, [pc, #440]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b6c      	ldr	r3, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6b      	ldr	r2, [pc, #428]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe ffd6 	bl	80029d0 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe ffd2 	bl	80029d0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e229      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b61      	ldr	r3, [pc, #388]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0xe8>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe ffc2 	bl	80029d0 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fe ffbe 	bl	80029d0 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e215      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x110>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d069      	beq.n	8003b52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a7e:	4b50      	ldr	r3, [pc, #320]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b4d      	ldr	r3, [pc, #308]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d11c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x190>
 8003a96:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x17a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e1e9      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	493d      	ldr	r1, [pc, #244]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	e040      	b.n	8003b52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d023      	beq.n	8003b20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad8:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a38      	ldr	r2, [pc, #224]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fe ff74 	bl	80029d0 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aec:	f7fe ff70 	bl	80029d0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e1c7      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	4b30      	ldr	r3, [pc, #192]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4929      	ldr	r1, [pc, #164]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
 8003b1e:	e018      	b.n	8003b52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b20:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fe ff50 	bl	80029d0 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fe ff4c 	bl	80029d0 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e1a3      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d038      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d019      	beq.n	8003b9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fe ff2d 	bl	80029d0 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7a:	f7fe ff29 	bl	80029d0 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e180      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x23a>
 8003b98:	e01a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9e:	4a08      	ldr	r2, [pc, #32]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fe ff13 	bl	80029d0 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bae:	f7fe ff0f 	bl	80029d0 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d903      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e166      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
 8003bc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc4:	4b92      	ldr	r3, [pc, #584]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ee      	bne.n	8003bae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a4 	beq.w	8003d26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bde:	4b8c      	ldr	r3, [pc, #560]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10d      	bne.n	8003c06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	4b89      	ldr	r3, [pc, #548]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	4a88      	ldr	r2, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf6:	4b86      	ldr	r3, [pc, #536]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c06:	4b83      	ldr	r3, [pc, #524]	; (8003e14 <HAL_RCC_OscConfig+0x4d4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d118      	bne.n	8003c44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c12:	4b80      	ldr	r3, [pc, #512]	; (8003e14 <HAL_RCC_OscConfig+0x4d4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7f      	ldr	r2, [pc, #508]	; (8003e14 <HAL_RCC_OscConfig+0x4d4>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe fed7 	bl	80029d0 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fe fed3 	bl	80029d0 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b64      	cmp	r3, #100	; 0x64
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e12a      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c38:	4b76      	ldr	r3, [pc, #472]	; (8003e14 <HAL_RCC_OscConfig+0x4d4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x31a>
 8003c4c:	4b70      	ldr	r3, [pc, #448]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a6f      	ldr	r2, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	e02d      	b.n	8003cb6 <HAL_RCC_OscConfig+0x376>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x33c>
 8003c62:	4b6b      	ldr	r3, [pc, #428]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a6a      	ldr	r2, [pc, #424]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6e:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a67      	ldr	r2, [pc, #412]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c74:	f023 0304 	bic.w	r3, r3, #4
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	e01c      	b.n	8003cb6 <HAL_RCC_OscConfig+0x376>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d10c      	bne.n	8003c9e <HAL_RCC_OscConfig+0x35e>
 8003c84:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4a61      	ldr	r2, [pc, #388]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c8a:	f043 0304 	orr.w	r3, r3, #4
 8003c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c90:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a5e      	ldr	r2, [pc, #376]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9c:	e00b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x376>
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8003caa:	4b59      	ldr	r3, [pc, #356]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a58      	ldr	r2, [pc, #352]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d015      	beq.n	8003cea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fe87 	bl	80029d0 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fe fe83 	bl	80029d0 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e0d8      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	4b4c      	ldr	r3, [pc, #304]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ee      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x386>
 8003ce8:	e014      	b.n	8003d14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cea:	f7fe fe71 	bl	80029d0 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fe fe6d 	bl	80029d0 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e0c2      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d08:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ee      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d105      	bne.n	8003d26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	4a3c      	ldr	r2, [pc, #240]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80ae 	beq.w	8003e8c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d30:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d06d      	beq.n	8003e18 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d14b      	bne.n	8003ddc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d44:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a31      	ldr	r2, [pc, #196]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fe3e 	bl	80029d0 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fe fe3a 	bl	80029d0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e091      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	4b29      	ldr	r3, [pc, #164]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	019b      	lsls	r3, r3, #6
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	041b      	lsls	r3, r3, #16
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	071b      	lsls	r3, r3, #28
 8003da2:	491b      	ldr	r1, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fe fe0c 	bl	80029d0 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fe fe08 	bl	80029d0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e05f      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x47c>
 8003dda:	e057      	b.n	8003e8c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fe fdf2 	bl	80029d0 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fe fdee 	bl	80029d0 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e045      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4b0>
 8003e0e:	e03d      	b.n	8003e8c <HAL_RCC_OscConfig+0x54c>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <HAL_RCC_OscConfig+0x558>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d030      	beq.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d129      	bne.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d122      	bne.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e48:	4013      	ands	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d119      	bne.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	3b01      	subs	r3, #1
 8003e62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10f      	bne.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800

08003e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0d0      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d910      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b67      	ldr	r3, [pc, #412]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 020f 	bic.w	r2, r3, #15
 8003eca:	4965      	ldr	r1, [pc, #404]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b63      	ldr	r3, [pc, #396]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0b8      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d020      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003efc:	4b59      	ldr	r3, [pc, #356]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a58      	ldr	r2, [pc, #352]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f14:	4b53      	ldr	r3, [pc, #332]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a52      	ldr	r2, [pc, #328]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b50      	ldr	r3, [pc, #320]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	494d      	ldr	r1, [pc, #308]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d040      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d115      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5e:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e073      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e06b      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7e:	4b39      	ldr	r3, [pc, #228]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4936      	ldr	r1, [pc, #216]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f90:	f7fe fd1e 	bl	80029d0 <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f98:	f7fe fd1a 	bl	80029d0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e053      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	4b2d      	ldr	r3, [pc, #180]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 020c 	and.w	r2, r3, #12
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d1eb      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d210      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 020f 	bic.w	r2, r3, #15
 8003fd6:	4922      	ldr	r1, [pc, #136]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e032      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4916      	ldr	r1, [pc, #88]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	490e      	ldr	r1, [pc, #56]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800402e:	f000 f821 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 8004032:	4602      	mov	r2, r0
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	490a      	ldr	r1, [pc, #40]	; (8004068 <HAL_RCC_ClockConfig+0x1cc>)
 8004040:	5ccb      	ldrb	r3, [r1, r3]
 8004042:	fa22 f303 	lsr.w	r3, r2, r3
 8004046:	4a09      	ldr	r2, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1d0>)
 8004048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCC_ClockConfig+0x1d4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fc7a 	bl	8002948 <HAL_InitTick>

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023c00 	.word	0x40023c00
 8004064:	40023800 	.word	0x40023800
 8004068:	080071fc 	.word	0x080071fc
 800406c:	200000f0 	.word	0x200000f0
 8004070:	200000f4 	.word	0x200000f4

08004074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b094      	sub	sp, #80	; 0x50
 800407a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	647b      	str	r3, [r7, #68]	; 0x44
 8004080:	2300      	movs	r3, #0
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004084:	2300      	movs	r3, #0
 8004086:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800408c:	4b79      	ldr	r3, [pc, #484]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b08      	cmp	r3, #8
 8004096:	d00d      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004098:	2b08      	cmp	r3, #8
 800409a:	f200 80e1 	bhi.w	8004260 <HAL_RCC_GetSysClockFreq+0x1ec>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x34>
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d003      	beq.n	80040ae <HAL_RCC_GetSysClockFreq+0x3a>
 80040a6:	e0db      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4b73      	ldr	r3, [pc, #460]	; (8004278 <HAL_RCC_GetSysClockFreq+0x204>)
 80040aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ac:	e0db      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ae:	4b73      	ldr	r3, [pc, #460]	; (800427c <HAL_RCC_GetSysClockFreq+0x208>)
 80040b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040b2:	e0d8      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b4:	4b6f      	ldr	r3, [pc, #444]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040bc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040be:	4b6d      	ldr	r3, [pc, #436]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d063      	beq.n	8004192 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ca:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	2200      	movs	r2, #0
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
 80040de:	2300      	movs	r3, #0
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
 80040e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	f04f 0000 	mov.w	r0, #0
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	0159      	lsls	r1, r3, #5
 80040f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f8:	0150      	lsls	r0, r2, #5
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4621      	mov	r1, r4
 8004100:	1a51      	subs	r1, r2, r1
 8004102:	6139      	str	r1, [r7, #16]
 8004104:	4629      	mov	r1, r5
 8004106:	eb63 0301 	sbc.w	r3, r3, r1
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004118:	4659      	mov	r1, fp
 800411a:	018b      	lsls	r3, r1, #6
 800411c:	4651      	mov	r1, sl
 800411e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004122:	4651      	mov	r1, sl
 8004124:	018a      	lsls	r2, r1, #6
 8004126:	4651      	mov	r1, sl
 8004128:	ebb2 0801 	subs.w	r8, r2, r1
 800412c:	4659      	mov	r1, fp
 800412e:	eb63 0901 	sbc.w	r9, r3, r1
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004146:	4690      	mov	r8, r2
 8004148:	4699      	mov	r9, r3
 800414a:	4623      	mov	r3, r4
 800414c:	eb18 0303 	adds.w	r3, r8, r3
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	462b      	mov	r3, r5
 8004154:	eb49 0303 	adc.w	r3, r9, r3
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004166:	4629      	mov	r1, r5
 8004168:	024b      	lsls	r3, r1, #9
 800416a:	4621      	mov	r1, r4
 800416c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004170:	4621      	mov	r1, r4
 8004172:	024a      	lsls	r2, r1, #9
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800417a:	2200      	movs	r2, #0
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
 800417e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004180:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004184:	f7fc f858 	bl	8000238 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004190:	e058      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	2200      	movs	r2, #0
 800419a:	4618      	mov	r0, r3
 800419c:	4611      	mov	r1, r2
 800419e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	2300      	movs	r3, #0
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	f04f 0000 	mov.w	r0, #0
 80041b4:	f04f 0100 	mov.w	r1, #0
 80041b8:	0159      	lsls	r1, r3, #5
 80041ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041be:	0150      	lsls	r0, r2, #5
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4641      	mov	r1, r8
 80041c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ca:	4649      	mov	r1, r9
 80041cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041e4:	ebb2 040a 	subs.w	r4, r2, sl
 80041e8:	eb63 050b 	sbc.w	r5, r3, fp
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	00eb      	lsls	r3, r5, #3
 80041f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041fa:	00e2      	lsls	r2, r4, #3
 80041fc:	4614      	mov	r4, r2
 80041fe:	461d      	mov	r5, r3
 8004200:	4643      	mov	r3, r8
 8004202:	18e3      	adds	r3, r4, r3
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	464b      	mov	r3, r9
 8004208:	eb45 0303 	adc.w	r3, r5, r3
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800421a:	4629      	mov	r1, r5
 800421c:	028b      	lsls	r3, r1, #10
 800421e:	4621      	mov	r1, r4
 8004220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004224:	4621      	mov	r1, r4
 8004226:	028a      	lsls	r2, r1, #10
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422e:	2200      	movs	r2, #0
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	61fa      	str	r2, [r7, #28]
 8004234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004238:	f7fb fffe 	bl	8000238 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	3301      	adds	r3, #1
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004254:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800425e:	e002      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetSysClockFreq+0x204>)
 8004262:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004268:	4618      	mov	r0, r3
 800426a:	3750      	adds	r7, #80	; 0x50
 800426c:	46bd      	mov	sp, r7
 800426e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	00f42400 	.word	0x00f42400
 800427c:	007a1200 	.word	0x007a1200

08004280 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_RCC_GetHCLKFreq+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	200000f0 	.word	0x200000f0

08004298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800429c:	f7ff fff0 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0a9b      	lsrs	r3, r3, #10
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4903      	ldr	r1, [pc, #12]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	0800720c 	.word	0x0800720c

080042c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042c4:	f7ff ffdc 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0b5b      	lsrs	r3, r3, #13
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4903      	ldr	r1, [pc, #12]	; (80042e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	0800720c 	.word	0x0800720c

080042e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004310:	4b69      	ldr	r3, [pc, #420]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4a68      	ldr	r2, [pc, #416]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800431a:	6093      	str	r3, [r2, #8]
 800431c:	4b66      	ldr	r3, [pc, #408]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	4964      	ldr	r1, [pc, #400]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d017      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004342:	4b5d      	ldr	r3, [pc, #372]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	4959      	ldr	r1, [pc, #356]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004360:	d101      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004362:	2301      	movs	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800436e:	2301      	movs	r3, #1
 8004370:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d017      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800437e:	4b4e      	ldr	r3, [pc, #312]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004384:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	494a      	ldr	r1, [pc, #296]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439c:	d101      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043ba:	2301      	movs	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 808b 	beq.w	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043cc:	4b3a      	ldr	r3, [pc, #232]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	4a39      	ldr	r2, [pc, #228]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6413      	str	r3, [r2, #64]	; 0x40
 80043d8:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043e4:	4b35      	ldr	r3, [pc, #212]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a34      	ldr	r2, [pc, #208]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f0:	f7fe faee 	bl	80029d0 <HAL_GetTick>
 80043f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f8:	f7fe faea 	bl	80029d0 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	; 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e38f      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800440a:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004416:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d035      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d02e      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004434:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800443e:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800444a:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a1a      	ldr	r2, [pc, #104]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004454:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800445c:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d114      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fe fab2 	bl	80029d0 <HAL_GetTick>
 800446c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	e00a      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fe faae 	bl	80029d0 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e351      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ee      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449e:	d111      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	4901      	ldr	r1, [pc, #4]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
 80044b6:	e00b      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40007000 	.word	0x40007000
 80044c0:	0ffffcff 	.word	0x0ffffcff
 80044c4:	4bac      	ldr	r3, [pc, #688]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4aab      	ldr	r2, [pc, #684]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044ce:	6093      	str	r3, [r2, #8]
 80044d0:	4ba9      	ldr	r3, [pc, #676]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044dc:	49a6      	ldr	r1, [pc, #664]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d010      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ee:	4ba2      	ldr	r3, [pc, #648]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f4:	4aa0      	ldr	r2, [pc, #640]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044fe:	4b9e      	ldr	r3, [pc, #632]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004500:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	499b      	ldr	r1, [pc, #620]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800451c:	4b96      	ldr	r3, [pc, #600]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800452a:	4993      	ldr	r1, [pc, #588]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800453e:	4b8e      	ldr	r3, [pc, #568]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454c:	498a      	ldr	r1, [pc, #552]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004560:	4b85      	ldr	r3, [pc, #532]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800456e:	4982      	ldr	r1, [pc, #520]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004582:	4b7d      	ldr	r3, [pc, #500]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	4979      	ldr	r1, [pc, #484]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045a4:	4b74      	ldr	r3, [pc, #464]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f023 0203 	bic.w	r2, r3, #3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	4971      	ldr	r1, [pc, #452]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045c6:	4b6c      	ldr	r3, [pc, #432]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f023 020c 	bic.w	r2, r3, #12
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d4:	4968      	ldr	r1, [pc, #416]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045e8:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	4960      	ldr	r1, [pc, #384]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800460a:	4b5b      	ldr	r3, [pc, #364]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004618:	4957      	ldr	r1, [pc, #348]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800462c:	4b52      	ldr	r3, [pc, #328]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	494f      	ldr	r1, [pc, #316]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800464e:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	4946      	ldr	r1, [pc, #280]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004670:	4b41      	ldr	r3, [pc, #260]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467e:	493e      	ldr	r1, [pc, #248]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004692:	4b39      	ldr	r3, [pc, #228]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004698:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a0:	4935      	ldr	r1, [pc, #212]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046b4:	4b30      	ldr	r3, [pc, #192]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046c2:	492d      	ldr	r1, [pc, #180]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d011      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046d6:	4b28      	ldr	r3, [pc, #160]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e4:	4924      	ldr	r1, [pc, #144]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f4:	d101      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046f6:	2301      	movs	r3, #1
 80046f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004706:	2301      	movs	r3, #1
 8004708:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004724:	4914      	ldr	r1, [pc, #80]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004748:	490b      	ldr	r1, [pc, #44]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00f      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004762:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476c:	4902      	ldr	r1, [pc, #8]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004774:	e002      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00b      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004788:	4b8a      	ldr	r3, [pc, #552]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800478a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	4986      	ldr	r1, [pc, #536]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047ac:	4b81      	ldr	r3, [pc, #516]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047bc:	497d      	ldr	r1, [pc, #500]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d006      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80d6 	beq.w	8004984 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047d8:	4b76      	ldr	r3, [pc, #472]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a75      	ldr	r2, [pc, #468]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e4:	f7fe f8f4 	bl	80029d0 <HAL_GetTick>
 80047e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047ec:	f7fe f8f0 	bl	80029d0 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	; 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e195      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047fe:	4b6d      	ldr	r3, [pc, #436]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d021      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	2b00      	cmp	r3, #0
 800481c:	d11d      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800481e:	4b65      	ldr	r3, [pc, #404]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800482c:	4b61      	ldr	r3, [pc, #388]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004832:	0e1b      	lsrs	r3, r3, #24
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	019a      	lsls	r2, r3, #6
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	431a      	orrs	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	061b      	lsls	r3, r3, #24
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	071b      	lsls	r3, r3, #28
 8004852:	4958      	ldr	r1, [pc, #352]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d004      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800486e:	d00a      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004878:	2b00      	cmp	r3, #0
 800487a:	d02e      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004884:	d129      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004886:	4b4b      	ldr	r3, [pc, #300]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004894:	4b47      	ldr	r3, [pc, #284]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489a:	0f1b      	lsrs	r3, r3, #28
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	019a      	lsls	r2, r3, #6
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	061b      	lsls	r3, r3, #24
 80048b4:	431a      	orrs	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	071b      	lsls	r3, r3, #28
 80048ba:	493e      	ldr	r1, [pc, #248]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048c2:	4b3c      	ldr	r3, [pc, #240]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c8:	f023 021f 	bic.w	r2, r3, #31
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	3b01      	subs	r3, #1
 80048d2:	4938      	ldr	r1, [pc, #224]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01d      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048e6:	4b33      	ldr	r3, [pc, #204]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ec:	0e1b      	lsrs	r3, r3, #24
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048f4:	4b2f      	ldr	r3, [pc, #188]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fa:	0f1b      	lsrs	r3, r3, #28
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	019a      	lsls	r2, r3, #6
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	431a      	orrs	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	071b      	lsls	r3, r3, #28
 800491a:	4926      	ldr	r1, [pc, #152]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d011      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	019a      	lsls	r2, r3, #6
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	061b      	lsls	r3, r3, #24
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	071b      	lsls	r3, r3, #28
 800494a:	491a      	ldr	r1, [pc, #104]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004952:	4b18      	ldr	r3, [pc, #96]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a17      	ldr	r2, [pc, #92]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004958:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800495c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495e:	f7fe f837 	bl	80029d0 <HAL_GetTick>
 8004962:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004964:	e008      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004966:	f7fe f833 	bl	80029d0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b64      	cmp	r3, #100	; 0x64
 8004972:	d901      	bls.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e0d8      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004978:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b01      	cmp	r3, #1
 8004988:	f040 80ce 	bne.w	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004998:	f7fe f81a 	bl	80029d0 <HAL_GetTick>
 800499c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800499e:	e00b      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049a0:	f7fe f816 	bl	80029d0 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	; 0x64
 80049ac:	d904      	bls.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e0bb      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049b8:	4b5e      	ldr	r3, [pc, #376]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c4:	d0ec      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d02e      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d12a      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049ee:	4b51      	ldr	r3, [pc, #324]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049fc:	4b4d      	ldr	r3, [pc, #308]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	0f1b      	lsrs	r3, r3, #28
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	019a      	lsls	r2, r3, #6
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	041b      	lsls	r3, r3, #16
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	071b      	lsls	r3, r3, #28
 8004a22:	4944      	ldr	r1, [pc, #272]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a2a:	4b42      	ldr	r3, [pc, #264]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	493d      	ldr	r1, [pc, #244]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d022      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a58:	d11d      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a5a:	4b36      	ldr	r3, [pc, #216]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	0e1b      	lsrs	r3, r3, #24
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a68:	4b32      	ldr	r3, [pc, #200]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	0f1b      	lsrs	r3, r3, #28
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	019a      	lsls	r2, r3, #6
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	431a      	orrs	r2, r3
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	061b      	lsls	r3, r3, #24
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	071b      	lsls	r3, r3, #28
 8004a8e:	4929      	ldr	r1, [pc, #164]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d028      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004aa2:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	0e1b      	lsrs	r3, r3, #24
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ab0:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	0c1b      	lsrs	r3, r3, #16
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	019a      	lsls	r2, r3, #6
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	041b      	lsls	r3, r3, #16
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	071b      	lsls	r3, r3, #28
 8004ad6:	4917      	ldr	r1, [pc, #92]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ade:	4b15      	ldr	r3, [pc, #84]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	4911      	ldr	r1, [pc, #68]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b00:	f7fd ff66 	bl	80029d0 <HAL_GetTick>
 8004b04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b08:	f7fd ff62 	bl	80029d0 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e007      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b26:	d1ef      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40023800 	.word	0x40023800

08004b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e049      	b.n	8004bde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fd fc60 	bl	8002424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f000 fe5a 	bl	8005830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d001      	beq.n	8004c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e054      	b.n	8004caa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a26      	ldr	r2, [pc, #152]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d022      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2a:	d01d      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <HAL_TIM_Base_Start_IT+0xd4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1e      	ldr	r2, [pc, #120]	; (8004cc8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1c      	ldr	r2, [pc, #112]	; (8004ccc <HAL_TIM_Base_Start_IT+0xe4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1b      	ldr	r2, [pc, #108]	; (8004cd0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d115      	bne.n	8004c94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_TIM_Base_Start_IT+0xec>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b06      	cmp	r3, #6
 8004c78:	d015      	beq.n	8004ca6 <HAL_TIM_Base_Start_IT+0xbe>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c80:	d011      	beq.n	8004ca6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c92:	e008      	b.n	8004ca6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e000      	b.n	8004ca8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40010400 	.word	0x40010400
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40001800 	.word	0x40001800
 8004cd4:	00010007 	.word	0x00010007

08004cd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e049      	b.n	8004d7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fd fb5c 	bl	80023bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f000 fd8a 	bl	8005830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_TIM_PWM_Start+0x24>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	bf14      	ite	ne
 8004da4:	2301      	movne	r3, #1
 8004da6:	2300      	moveq	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e03c      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d109      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0x3e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	bf14      	ite	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	2300      	moveq	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e02f      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d109      	bne.n	8004de0 <HAL_TIM_PWM_Start+0x58>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e022      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d109      	bne.n	8004dfa <HAL_TIM_PWM_Start+0x72>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	bf14      	ite	ne
 8004df2:	2301      	movne	r3, #1
 8004df4:	2300      	moveq	r3, #0
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	e015      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d109      	bne.n	8004e14 <HAL_TIM_PWM_Start+0x8c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e008      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e092      	b.n	8004f54 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_PWM_Start+0xb6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e3c:	e023      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_PWM_Start+0xc6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4c:	e01b      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_PWM_Start+0xd6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e5c:	e013      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b0c      	cmp	r3, #12
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_PWM_Start+0xe6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e6c:	e00b      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_PWM_Start+0xf6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e7c:	e003      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	6839      	ldr	r1, [r7, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 f866 	bl	8005f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a30      	ldr	r2, [pc, #192]	; (8004f5c <HAL_TIM_PWM_Start+0x1d4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_TIM_PWM_Start+0x120>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2f      	ldr	r2, [pc, #188]	; (8004f60 <HAL_TIM_PWM_Start+0x1d8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d101      	bne.n	8004eac <HAL_TIM_PWM_Start+0x124>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_TIM_PWM_Start+0x126>
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <HAL_TIM_PWM_Start+0x1d4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d022      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed4:	d01d      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <HAL_TIM_PWM_Start+0x1dc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d018      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a20      	ldr	r2, [pc, #128]	; (8004f68 <HAL_TIM_PWM_Start+0x1e0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <HAL_TIM_PWM_Start+0x1e4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a19      	ldr	r2, [pc, #100]	; (8004f60 <HAL_TIM_PWM_Start+0x1d8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1b      	ldr	r2, [pc, #108]	; (8004f70 <HAL_TIM_PWM_Start+0x1e8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a19      	ldr	r2, [pc, #100]	; (8004f74 <HAL_TIM_PWM_Start+0x1ec>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d115      	bne.n	8004f3e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <HAL_TIM_PWM_Start+0x1f0>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b06      	cmp	r3, #6
 8004f22:	d015      	beq.n	8004f50 <HAL_TIM_PWM_Start+0x1c8>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2a:	d011      	beq.n	8004f50 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3c:	e008      	b.n	8004f50 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	e000      	b.n	8004f52 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40010400 	.word	0x40010400
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40000800 	.word	0x40000800
 8004f6c:	40000c00 	.word	0x40000c00
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40001800 	.word	0x40001800
 8004f78:	00010007 	.word	0x00010007

08004f7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e08f      	b.n	80050b0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fd f8bd 	bl	8002124 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6899      	ldr	r1, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <HAL_TIM_Encoder_Init+0x13c>)
 8004fbe:	400b      	ands	r3, r1
 8004fc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f000 fc2f 	bl	8005830 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4b31      	ldr	r3, [pc, #196]	; (80050bc <HAL_TIM_Encoder_Init+0x140>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	4313      	orrs	r3, r2
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <HAL_TIM_Encoder_Init+0x144>)
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4b2a      	ldr	r3, [pc, #168]	; (80050c4 <HAL_TIM_Encoder_Init+0x148>)
 800501a:	4013      	ands	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	4313      	orrs	r3, r2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	011a      	lsls	r2, r3, #4
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	031b      	lsls	r3, r3, #12
 800503c:	4313      	orrs	r3, r2
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	4313      	orrs	r3, r2
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	fffebff8 	.word	0xfffebff8
 80050bc:	fffffcfc 	.word	0xfffffcfc
 80050c0:	fffff3f3 	.word	0xfffff3f3
 80050c4:	ffff0f0f 	.word	0xffff0f0f

080050c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d110      	bne.n	800511a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d102      	bne.n	8005104 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050fe:	7b7b      	ldrb	r3, [r7, #13]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d001      	beq.n	8005108 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e069      	b.n	80051dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005118:	e031      	b.n	800517e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b04      	cmp	r3, #4
 800511e:	d110      	bne.n	8005142 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005120:	7bbb      	ldrb	r3, [r7, #14]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d102      	bne.n	800512c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005126:	7b3b      	ldrb	r3, [r7, #12]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d001      	beq.n	8005130 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e055      	b.n	80051dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005140:	e01d      	b.n	800517e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d108      	bne.n	800515a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005148:	7bbb      	ldrb	r3, [r7, #14]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d105      	bne.n	800515a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800514e:	7b7b      	ldrb	r3, [r7, #13]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d102      	bne.n	800515a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005154:	7b3b      	ldrb	r3, [r7, #12]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d001      	beq.n	800515e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e03e      	b.n	80051dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_TIM_Encoder_Start+0xc4>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b04      	cmp	r3, #4
 8005188:	d008      	beq.n	800519c <HAL_TIM_Encoder_Start+0xd4>
 800518a:	e00f      	b.n	80051ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2201      	movs	r2, #1
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fee3 	bl	8005f60 <TIM_CCxChannelCmd>
      break;
 800519a:	e016      	b.n	80051ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2201      	movs	r2, #1
 80051a2:	2104      	movs	r1, #4
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fedb 	bl	8005f60 <TIM_CCxChannelCmd>
      break;
 80051aa:	e00e      	b.n	80051ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2201      	movs	r2, #1
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fed3 	bl	8005f60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2201      	movs	r2, #1
 80051c0:	2104      	movs	r1, #4
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fecc 	bl	8005f60 <TIM_CCxChannelCmd>
      break;
 80051c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d122      	bne.n	8005240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b02      	cmp	r3, #2
 8005206:	d11b      	bne.n	8005240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0202 	mvn.w	r2, #2
 8005210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fae4 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fad6 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fae7 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b04      	cmp	r3, #4
 800524c:	d122      	bne.n	8005294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b04      	cmp	r3, #4
 800525a:	d11b      	bne.n	8005294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0204 	mvn.w	r2, #4
 8005264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 faba 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 faac 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fabd 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d122      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d11b      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0208 	mvn.w	r2, #8
 80052b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2204      	movs	r2, #4
 80052be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa90 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa82 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fa93 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2b10      	cmp	r3, #16
 80052f4:	d122      	bne.n	800533c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b10      	cmp	r3, #16
 8005302:	d11b      	bne.n	800533c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0210 	mvn.w	r2, #16
 800530c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2208      	movs	r2, #8
 8005312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fa66 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 8005328:	e005      	b.n	8005336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa58 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fa69 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b01      	cmp	r3, #1
 8005348:	d10e      	bne.n	8005368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b01      	cmp	r3, #1
 8005356:	d107      	bne.n	8005368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0201 	mvn.w	r2, #1
 8005360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fb f8ec 	bl	8000540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d10e      	bne.n	8005394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005380:	2b80      	cmp	r3, #128	; 0x80
 8005382:	d107      	bne.n	8005394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800538c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 ff66 	bl	8006260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a2:	d10e      	bne.n	80053c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b80      	cmp	r3, #128	; 0x80
 80053b0:	d107      	bne.n	80053c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 ff59 	bl	8006274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	d10e      	bne.n	80053ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053da:	2b40      	cmp	r3, #64	; 0x40
 80053dc:	d107      	bne.n	80053ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fa17 	bl	800581c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d10e      	bne.n	800541a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b20      	cmp	r3, #32
 8005408:	d107      	bne.n	800541a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f06f 0220 	mvn.w	r2, #32
 8005412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 ff19 	bl	800624c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800543e:	2302      	movs	r3, #2
 8005440:	e0ff      	b.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b14      	cmp	r3, #20
 800544e:	f200 80f0 	bhi.w	8005632 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005452:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	080054ad 	.word	0x080054ad
 800545c:	08005633 	.word	0x08005633
 8005460:	08005633 	.word	0x08005633
 8005464:	08005633 	.word	0x08005633
 8005468:	080054ed 	.word	0x080054ed
 800546c:	08005633 	.word	0x08005633
 8005470:	08005633 	.word	0x08005633
 8005474:	08005633 	.word	0x08005633
 8005478:	0800552f 	.word	0x0800552f
 800547c:	08005633 	.word	0x08005633
 8005480:	08005633 	.word	0x08005633
 8005484:	08005633 	.word	0x08005633
 8005488:	0800556f 	.word	0x0800556f
 800548c:	08005633 	.word	0x08005633
 8005490:	08005633 	.word	0x08005633
 8005494:	08005633 	.word	0x08005633
 8005498:	080055b1 	.word	0x080055b1
 800549c:	08005633 	.word	0x08005633
 80054a0:	08005633 	.word	0x08005633
 80054a4:	08005633 	.word	0x08005633
 80054a8:	080055f1 	.word	0x080055f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fa5c 	bl	8005970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0208 	orr.w	r2, r2, #8
 80054c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0204 	bic.w	r2, r2, #4
 80054d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6999      	ldr	r1, [r3, #24]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691a      	ldr	r2, [r3, #16]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	619a      	str	r2, [r3, #24]
      break;
 80054ea:	e0a5      	b.n	8005638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 faae 	bl	8005a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6999      	ldr	r1, [r3, #24]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	021a      	lsls	r2, r3, #8
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	619a      	str	r2, [r3, #24]
      break;
 800552c:	e084      	b.n	8005638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fb05 	bl	8005b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0208 	orr.w	r2, r2, #8
 8005548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0204 	bic.w	r2, r2, #4
 8005558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69d9      	ldr	r1, [r3, #28]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	61da      	str	r2, [r3, #28]
      break;
 800556c:	e064      	b.n	8005638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fb5b 	bl	8005c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69d9      	ldr	r1, [r3, #28]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	021a      	lsls	r2, r3, #8
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	61da      	str	r2, [r3, #28]
      break;
 80055ae:	e043      	b.n	8005638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fb92 	bl	8005ce0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0208 	orr.w	r2, r2, #8
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0204 	bic.w	r2, r2, #4
 80055da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055ee:	e023      	b.n	8005638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fbc4 	bl	8005d84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	021a      	lsls	r2, r3, #8
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005630:	e002      	b.n	8005638 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	75fb      	strb	r3, [r7, #23]
      break;
 8005636:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005640:	7dfb      	ldrb	r3, [r7, #23]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop

0800564c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_TIM_ConfigClockSource+0x1c>
 8005664:	2302      	movs	r3, #2
 8005666:	e0b4      	b.n	80057d2 <HAL_TIM_ConfigClockSource+0x186>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	4b56      	ldr	r3, [pc, #344]	; (80057dc <HAL_TIM_ConfigClockSource+0x190>)
 8005684:	4013      	ands	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800568e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a0:	d03e      	beq.n	8005720 <HAL_TIM_ConfigClockSource+0xd4>
 80056a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a6:	f200 8087 	bhi.w	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ae:	f000 8086 	beq.w	80057be <HAL_TIM_ConfigClockSource+0x172>
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b6:	d87f      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056b8:	2b70      	cmp	r3, #112	; 0x70
 80056ba:	d01a      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0xa6>
 80056bc:	2b70      	cmp	r3, #112	; 0x70
 80056be:	d87b      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056c0:	2b60      	cmp	r3, #96	; 0x60
 80056c2:	d050      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x11a>
 80056c4:	2b60      	cmp	r3, #96	; 0x60
 80056c6:	d877      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056c8:	2b50      	cmp	r3, #80	; 0x50
 80056ca:	d03c      	beq.n	8005746 <HAL_TIM_ConfigClockSource+0xfa>
 80056cc:	2b50      	cmp	r3, #80	; 0x50
 80056ce:	d873      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d0:	2b40      	cmp	r3, #64	; 0x40
 80056d2:	d058      	beq.n	8005786 <HAL_TIM_ConfigClockSource+0x13a>
 80056d4:	2b40      	cmp	r3, #64	; 0x40
 80056d6:	d86f      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d8:	2b30      	cmp	r3, #48	; 0x30
 80056da:	d064      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x15a>
 80056dc:	2b30      	cmp	r3, #48	; 0x30
 80056de:	d86b      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d060      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x15a>
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d867      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d05c      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x15a>
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d05a      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x15a>
 80056f0:	e062      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6899      	ldr	r1, [r3, #8]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f000 fc0d 	bl	8005f20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005714:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	609a      	str	r2, [r3, #8]
      break;
 800571e:	e04f      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6818      	ldr	r0, [r3, #0]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	6899      	ldr	r1, [r3, #8]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f000 fbf6 	bl	8005f20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005742:	609a      	str	r2, [r3, #8]
      break;
 8005744:	e03c      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6859      	ldr	r1, [r3, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	461a      	mov	r2, r3
 8005754:	f000 fb6a 	bl	8005e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2150      	movs	r1, #80	; 0x50
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fbc3 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 8005764:	e02c      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6859      	ldr	r1, [r3, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	461a      	mov	r2, r3
 8005774:	f000 fb89 	bl	8005e8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2160      	movs	r1, #96	; 0x60
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fbb3 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 8005784:	e01c      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6859      	ldr	r1, [r3, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	461a      	mov	r2, r3
 8005794:	f000 fb4a 	bl	8005e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2140      	movs	r1, #64	; 0x40
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fba3 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 80057a4:	e00c      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4619      	mov	r1, r3
 80057b0:	4610      	mov	r0, r2
 80057b2:	f000 fb9a 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 80057b6:	e003      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
      break;
 80057bc:	e000      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	fffeff88 	.word	0xfffeff88

080057e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a40      	ldr	r2, [pc, #256]	; (8005944 <TIM_Base_SetConfig+0x114>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d013      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584e:	d00f      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3d      	ldr	r2, [pc, #244]	; (8005948 <TIM_Base_SetConfig+0x118>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00b      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3c      	ldr	r2, [pc, #240]	; (800594c <TIM_Base_SetConfig+0x11c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d007      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a3b      	ldr	r2, [pc, #236]	; (8005950 <TIM_Base_SetConfig+0x120>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3a      	ldr	r2, [pc, #232]	; (8005954 <TIM_Base_SetConfig+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d108      	bne.n	8005882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2f      	ldr	r2, [pc, #188]	; (8005944 <TIM_Base_SetConfig+0x114>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d02b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d027      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2c      	ldr	r2, [pc, #176]	; (8005948 <TIM_Base_SetConfig+0x118>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d023      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2b      	ldr	r2, [pc, #172]	; (800594c <TIM_Base_SetConfig+0x11c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01f      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2a      	ldr	r2, [pc, #168]	; (8005950 <TIM_Base_SetConfig+0x120>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a29      	ldr	r2, [pc, #164]	; (8005954 <TIM_Base_SetConfig+0x124>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d017      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a28      	ldr	r2, [pc, #160]	; (8005958 <TIM_Base_SetConfig+0x128>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a27      	ldr	r2, [pc, #156]	; (800595c <TIM_Base_SetConfig+0x12c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00f      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a26      	ldr	r2, [pc, #152]	; (8005960 <TIM_Base_SetConfig+0x130>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a25      	ldr	r2, [pc, #148]	; (8005964 <TIM_Base_SetConfig+0x134>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a24      	ldr	r2, [pc, #144]	; (8005968 <TIM_Base_SetConfig+0x138>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a23      	ldr	r2, [pc, #140]	; (800596c <TIM_Base_SetConfig+0x13c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <TIM_Base_SetConfig+0x114>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_Base_SetConfig+0xf8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a0c      	ldr	r2, [pc, #48]	; (8005954 <TIM_Base_SetConfig+0x124>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d103      	bne.n	8005930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	615a      	str	r2, [r3, #20]
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40010000 	.word	0x40010000
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40000c00 	.word	0x40000c00
 8005954:	40010400 	.word	0x40010400
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800
 8005964:	40001800 	.word	0x40001800
 8005968:	40001c00 	.word	0x40001c00
 800596c:	40002000 	.word	0x40002000

08005970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f023 0201 	bic.w	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4b2b      	ldr	r3, [pc, #172]	; (8005a48 <TIM_OC1_SetConfig+0xd8>)
 800599c:	4013      	ands	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0303 	bic.w	r3, r3, #3
 80059a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f023 0302 	bic.w	r3, r3, #2
 80059b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a21      	ldr	r2, [pc, #132]	; (8005a4c <TIM_OC1_SetConfig+0xdc>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d003      	beq.n	80059d4 <TIM_OC1_SetConfig+0x64>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a20      	ldr	r2, [pc, #128]	; (8005a50 <TIM_OC1_SetConfig+0xe0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d10c      	bne.n	80059ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 0308 	bic.w	r3, r3, #8
 80059da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f023 0304 	bic.w	r3, r3, #4
 80059ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <TIM_OC1_SetConfig+0xdc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_OC1_SetConfig+0x8e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <TIM_OC1_SetConfig+0xe0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d111      	bne.n	8005a22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	621a      	str	r2, [r3, #32]
}
 8005a3c:	bf00      	nop
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	fffeff8f 	.word	0xfffeff8f
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40010400 	.word	0x40010400

08005a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f023 0210 	bic.w	r2, r3, #16
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4b2e      	ldr	r3, [pc, #184]	; (8005b38 <TIM_OC2_SetConfig+0xe4>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0320 	bic.w	r3, r3, #32
 8005a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a23      	ldr	r2, [pc, #140]	; (8005b3c <TIM_OC2_SetConfig+0xe8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC2_SetConfig+0x68>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a22      	ldr	r2, [pc, #136]	; (8005b40 <TIM_OC2_SetConfig+0xec>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d10d      	bne.n	8005ad8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <TIM_OC2_SetConfig+0xe8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC2_SetConfig+0x94>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <TIM_OC2_SetConfig+0xec>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d113      	bne.n	8005b10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	feff8fff 	.word	0xfeff8fff
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40010400 	.word	0x40010400

08005b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4b2d      	ldr	r3, [pc, #180]	; (8005c24 <TIM_OC3_SetConfig+0xe0>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a22      	ldr	r2, [pc, #136]	; (8005c28 <TIM_OC3_SetConfig+0xe4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_OC3_SetConfig+0x66>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a21      	ldr	r2, [pc, #132]	; (8005c2c <TIM_OC3_SetConfig+0xe8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10d      	bne.n	8005bc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <TIM_OC3_SetConfig+0xe4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d003      	beq.n	8005bd6 <TIM_OC3_SetConfig+0x92>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <TIM_OC3_SetConfig+0xe8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d113      	bne.n	8005bfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	621a      	str	r2, [r3, #32]
}
 8005c18:	bf00      	nop
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	fffeff8f 	.word	0xfffeff8f
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40010400 	.word	0x40010400

08005c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4b1e      	ldr	r3, [pc, #120]	; (8005cd4 <TIM_OC4_SetConfig+0xa4>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	031b      	lsls	r3, r3, #12
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a13      	ldr	r2, [pc, #76]	; (8005cd8 <TIM_OC4_SetConfig+0xa8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_OC4_SetConfig+0x68>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <TIM_OC4_SetConfig+0xac>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d109      	bne.n	8005cac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	019b      	lsls	r3, r3, #6
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	feff8fff 	.word	0xfeff8fff
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40010400 	.word	0x40010400

08005ce0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <TIM_OC5_SetConfig+0x98>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <TIM_OC5_SetConfig+0x9c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d003      	beq.n	8005d3e <TIM_OC5_SetConfig+0x5e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a11      	ldr	r2, [pc, #68]	; (8005d80 <TIM_OC5_SetConfig+0xa0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d109      	bne.n	8005d52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	621a      	str	r2, [r3, #32]
}
 8005d6c:	bf00      	nop
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	fffeff8f 	.word	0xfffeff8f
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40010400 	.word	0x40010400

08005d84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4b1c      	ldr	r3, [pc, #112]	; (8005e20 <TIM_OC6_SetConfig+0x9c>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	051b      	lsls	r3, r3, #20
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a13      	ldr	r2, [pc, #76]	; (8005e24 <TIM_OC6_SetConfig+0xa0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <TIM_OC6_SetConfig+0x60>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a12      	ldr	r2, [pc, #72]	; (8005e28 <TIM_OC6_SetConfig+0xa4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d109      	bne.n	8005df8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	029b      	lsls	r3, r3, #10
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	feff8fff 	.word	0xfeff8fff
 8005e24:	40010000 	.word	0x40010000
 8005e28:	40010400 	.word	0x40010400

08005e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f023 0201 	bic.w	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 030a 	bic.w	r3, r3, #10
 8005e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b087      	sub	sp, #28
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0210 	bic.w	r2, r3, #16
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	031b      	lsls	r3, r3, #12
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f043 0307 	orr.w	r3, r3, #7
 8005f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	609a      	str	r2, [r3, #8]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	021a      	lsls	r2, r3, #8
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	431a      	orrs	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	609a      	str	r2, [r3, #8]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	2201      	movs	r2, #1
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a1a      	ldr	r2, [r3, #32]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	401a      	ands	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1a      	ldr	r2, [r3, #32]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f003 031f 	and.w	r3, r3, #31
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	fa01 f303 	lsl.w	r3, r1, r3
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
	...

08005fac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d109      	bne.n	8005fd0 <HAL_TIMEx_PWMN_Start+0x24>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	bf14      	ite	ne
 8005fc8:	2301      	movne	r3, #1
 8005fca:	2300      	moveq	r3, #0
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	e022      	b.n	8006016 <HAL_TIMEx_PWMN_Start+0x6a>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d109      	bne.n	8005fea <HAL_TIMEx_PWMN_Start+0x3e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	bf14      	ite	ne
 8005fe2:	2301      	movne	r3, #1
 8005fe4:	2300      	moveq	r3, #0
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	e015      	b.n	8006016 <HAL_TIMEx_PWMN_Start+0x6a>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d109      	bne.n	8006004 <HAL_TIMEx_PWMN_Start+0x58>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	bf14      	ite	ne
 8005ffc:	2301      	movne	r3, #1
 8005ffe:	2300      	moveq	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	e008      	b.n	8006016 <HAL_TIMEx_PWMN_Start+0x6a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b01      	cmp	r3, #1
 800600e:	bf14      	ite	ne
 8006010:	2301      	movne	r3, #1
 8006012:	2300      	moveq	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e073      	b.n	8006106 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <HAL_TIMEx_PWMN_Start+0x82>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602c:	e013      	b.n	8006056 <HAL_TIMEx_PWMN_Start+0xaa>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b04      	cmp	r3, #4
 8006032:	d104      	bne.n	800603e <HAL_TIMEx_PWMN_Start+0x92>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800603c:	e00b      	b.n	8006056 <HAL_TIMEx_PWMN_Start+0xaa>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b08      	cmp	r3, #8
 8006042:	d104      	bne.n	800604e <HAL_TIMEx_PWMN_Start+0xa2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800604c:	e003      	b.n	8006056 <HAL_TIMEx_PWMN_Start+0xaa>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2204      	movs	r2, #4
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 f912 	bl	8006288 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006072:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a25      	ldr	r2, [pc, #148]	; (8006110 <HAL_TIMEx_PWMN_Start+0x164>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d022      	beq.n	80060c4 <HAL_TIMEx_PWMN_Start+0x118>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006086:	d01d      	beq.n	80060c4 <HAL_TIMEx_PWMN_Start+0x118>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a21      	ldr	r2, [pc, #132]	; (8006114 <HAL_TIMEx_PWMN_Start+0x168>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <HAL_TIMEx_PWMN_Start+0x118>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a20      	ldr	r2, [pc, #128]	; (8006118 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <HAL_TIMEx_PWMN_Start+0x118>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1e      	ldr	r2, [pc, #120]	; (800611c <HAL_TIMEx_PWMN_Start+0x170>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_TIMEx_PWMN_Start+0x118>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <HAL_TIMEx_PWMN_Start+0x174>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_TIMEx_PWMN_Start+0x118>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <HAL_TIMEx_PWMN_Start+0x178>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_TIMEx_PWMN_Start+0x118>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1a      	ldr	r2, [pc, #104]	; (8006128 <HAL_TIMEx_PWMN_Start+0x17c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d115      	bne.n	80060f0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	4b18      	ldr	r3, [pc, #96]	; (800612c <HAL_TIMEx_PWMN_Start+0x180>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b06      	cmp	r3, #6
 80060d4:	d015      	beq.n	8006102 <HAL_TIMEx_PWMN_Start+0x156>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060dc:	d011      	beq.n	8006102 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ee:	e008      	b.n	8006102 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e000      	b.n	8006104 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006102:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40010400 	.word	0x40010400
 8006124:	40014000 	.word	0x40014000
 8006128:	40001800 	.word	0x40001800
 800612c:	00010007 	.word	0x00010007

08006130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006144:	2302      	movs	r3, #2
 8006146:	e06d      	b.n	8006224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a30      	ldr	r2, [pc, #192]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2f      	ldr	r2, [pc, #188]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d108      	bne.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006182:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006194:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a20      	ldr	r2, [pc, #128]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d022      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ba:	d01d      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1d      	ldr	r2, [pc, #116]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d018      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1c      	ldr	r2, [pc, #112]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d013      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1a      	ldr	r2, [pc, #104]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00e      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a15      	ldr	r2, [pc, #84]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a16      	ldr	r2, [pc, #88]	; (8006244 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a15      	ldr	r2, [pc, #84]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d10c      	bne.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	4313      	orrs	r3, r2
 8006208:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	40010000 	.word	0x40010000
 8006234:	40010400 	.word	0x40010400
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40000c00 	.word	0x40000c00
 8006244:	40014000 	.word	0x40014000
 8006248:	40001800 	.word	0x40001800

0800624c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2204      	movs	r2, #4
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	43db      	mvns	r3, r3
 80062aa:	401a      	ands	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a1a      	ldr	r2, [r3, #32]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 031f 	and.w	r3, r3, #31
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	fa01 f303 	lsl.w	r3, r1, r3
 80062c0:	431a      	orrs	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e040      	b.n	8006366 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7fc f9c5 	bl	8002684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2224      	movs	r2, #36	; 0x24
 80062fe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f82d 	bl	8006370 <UART_SetConfig>
 8006316:	4603      	mov	r3, r0
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e022      	b.n	8006366 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fa85 	bl	8006838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800633c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800634c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0201 	orr.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fb0c 	bl	800697c <UART_CheckIdleState>
 8006364:	4603      	mov	r3, r0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4ba6      	ldr	r3, [pc, #664]	; (8006634 <UART_SetConfig+0x2c4>)
 800639c:	4013      	ands	r3, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6812      	ldr	r2, [r2, #0]
 80063a2:	6979      	ldr	r1, [r7, #20]
 80063a4:	430b      	orrs	r3, r1
 80063a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	430a      	orrs	r2, r1
 80063e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a94      	ldr	r2, [pc, #592]	; (8006638 <UART_SetConfig+0x2c8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d120      	bne.n	800642e <UART_SetConfig+0xbe>
 80063ec:	4b93      	ldr	r3, [pc, #588]	; (800663c <UART_SetConfig+0x2cc>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d816      	bhi.n	8006428 <UART_SetConfig+0xb8>
 80063fa:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <UART_SetConfig+0x90>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006411 	.word	0x08006411
 8006404:	0800641d 	.word	0x0800641d
 8006408:	08006417 	.word	0x08006417
 800640c:	08006423 	.word	0x08006423
 8006410:	2301      	movs	r3, #1
 8006412:	77fb      	strb	r3, [r7, #31]
 8006414:	e150      	b.n	80066b8 <UART_SetConfig+0x348>
 8006416:	2302      	movs	r3, #2
 8006418:	77fb      	strb	r3, [r7, #31]
 800641a:	e14d      	b.n	80066b8 <UART_SetConfig+0x348>
 800641c:	2304      	movs	r3, #4
 800641e:	77fb      	strb	r3, [r7, #31]
 8006420:	e14a      	b.n	80066b8 <UART_SetConfig+0x348>
 8006422:	2308      	movs	r3, #8
 8006424:	77fb      	strb	r3, [r7, #31]
 8006426:	e147      	b.n	80066b8 <UART_SetConfig+0x348>
 8006428:	2310      	movs	r3, #16
 800642a:	77fb      	strb	r3, [r7, #31]
 800642c:	e144      	b.n	80066b8 <UART_SetConfig+0x348>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a83      	ldr	r2, [pc, #524]	; (8006640 <UART_SetConfig+0x2d0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d132      	bne.n	800649e <UART_SetConfig+0x12e>
 8006438:	4b80      	ldr	r3, [pc, #512]	; (800663c <UART_SetConfig+0x2cc>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643e:	f003 030c 	and.w	r3, r3, #12
 8006442:	2b0c      	cmp	r3, #12
 8006444:	d828      	bhi.n	8006498 <UART_SetConfig+0x128>
 8006446:	a201      	add	r2, pc, #4	; (adr r2, 800644c <UART_SetConfig+0xdc>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	08006481 	.word	0x08006481
 8006450:	08006499 	.word	0x08006499
 8006454:	08006499 	.word	0x08006499
 8006458:	08006499 	.word	0x08006499
 800645c:	0800648d 	.word	0x0800648d
 8006460:	08006499 	.word	0x08006499
 8006464:	08006499 	.word	0x08006499
 8006468:	08006499 	.word	0x08006499
 800646c:	08006487 	.word	0x08006487
 8006470:	08006499 	.word	0x08006499
 8006474:	08006499 	.word	0x08006499
 8006478:	08006499 	.word	0x08006499
 800647c:	08006493 	.word	0x08006493
 8006480:	2300      	movs	r3, #0
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e118      	b.n	80066b8 <UART_SetConfig+0x348>
 8006486:	2302      	movs	r3, #2
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e115      	b.n	80066b8 <UART_SetConfig+0x348>
 800648c:	2304      	movs	r3, #4
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e112      	b.n	80066b8 <UART_SetConfig+0x348>
 8006492:	2308      	movs	r3, #8
 8006494:	77fb      	strb	r3, [r7, #31]
 8006496:	e10f      	b.n	80066b8 <UART_SetConfig+0x348>
 8006498:	2310      	movs	r3, #16
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e10c      	b.n	80066b8 <UART_SetConfig+0x348>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a68      	ldr	r2, [pc, #416]	; (8006644 <UART_SetConfig+0x2d4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d120      	bne.n	80064ea <UART_SetConfig+0x17a>
 80064a8:	4b64      	ldr	r3, [pc, #400]	; (800663c <UART_SetConfig+0x2cc>)
 80064aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064b2:	2b30      	cmp	r3, #48	; 0x30
 80064b4:	d013      	beq.n	80064de <UART_SetConfig+0x16e>
 80064b6:	2b30      	cmp	r3, #48	; 0x30
 80064b8:	d814      	bhi.n	80064e4 <UART_SetConfig+0x174>
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d009      	beq.n	80064d2 <UART_SetConfig+0x162>
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d810      	bhi.n	80064e4 <UART_SetConfig+0x174>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <UART_SetConfig+0x15c>
 80064c6:	2b10      	cmp	r3, #16
 80064c8:	d006      	beq.n	80064d8 <UART_SetConfig+0x168>
 80064ca:	e00b      	b.n	80064e4 <UART_SetConfig+0x174>
 80064cc:	2300      	movs	r3, #0
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e0f2      	b.n	80066b8 <UART_SetConfig+0x348>
 80064d2:	2302      	movs	r3, #2
 80064d4:	77fb      	strb	r3, [r7, #31]
 80064d6:	e0ef      	b.n	80066b8 <UART_SetConfig+0x348>
 80064d8:	2304      	movs	r3, #4
 80064da:	77fb      	strb	r3, [r7, #31]
 80064dc:	e0ec      	b.n	80066b8 <UART_SetConfig+0x348>
 80064de:	2308      	movs	r3, #8
 80064e0:	77fb      	strb	r3, [r7, #31]
 80064e2:	e0e9      	b.n	80066b8 <UART_SetConfig+0x348>
 80064e4:	2310      	movs	r3, #16
 80064e6:	77fb      	strb	r3, [r7, #31]
 80064e8:	e0e6      	b.n	80066b8 <UART_SetConfig+0x348>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a56      	ldr	r2, [pc, #344]	; (8006648 <UART_SetConfig+0x2d8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d120      	bne.n	8006536 <UART_SetConfig+0x1c6>
 80064f4:	4b51      	ldr	r3, [pc, #324]	; (800663c <UART_SetConfig+0x2cc>)
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006500:	d013      	beq.n	800652a <UART_SetConfig+0x1ba>
 8006502:	2bc0      	cmp	r3, #192	; 0xc0
 8006504:	d814      	bhi.n	8006530 <UART_SetConfig+0x1c0>
 8006506:	2b80      	cmp	r3, #128	; 0x80
 8006508:	d009      	beq.n	800651e <UART_SetConfig+0x1ae>
 800650a:	2b80      	cmp	r3, #128	; 0x80
 800650c:	d810      	bhi.n	8006530 <UART_SetConfig+0x1c0>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <UART_SetConfig+0x1a8>
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d006      	beq.n	8006524 <UART_SetConfig+0x1b4>
 8006516:	e00b      	b.n	8006530 <UART_SetConfig+0x1c0>
 8006518:	2300      	movs	r3, #0
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e0cc      	b.n	80066b8 <UART_SetConfig+0x348>
 800651e:	2302      	movs	r3, #2
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e0c9      	b.n	80066b8 <UART_SetConfig+0x348>
 8006524:	2304      	movs	r3, #4
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e0c6      	b.n	80066b8 <UART_SetConfig+0x348>
 800652a:	2308      	movs	r3, #8
 800652c:	77fb      	strb	r3, [r7, #31]
 800652e:	e0c3      	b.n	80066b8 <UART_SetConfig+0x348>
 8006530:	2310      	movs	r3, #16
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e0c0      	b.n	80066b8 <UART_SetConfig+0x348>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a44      	ldr	r2, [pc, #272]	; (800664c <UART_SetConfig+0x2dc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d125      	bne.n	800658c <UART_SetConfig+0x21c>
 8006540:	4b3e      	ldr	r3, [pc, #248]	; (800663c <UART_SetConfig+0x2cc>)
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800654a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800654e:	d017      	beq.n	8006580 <UART_SetConfig+0x210>
 8006550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006554:	d817      	bhi.n	8006586 <UART_SetConfig+0x216>
 8006556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800655a:	d00b      	beq.n	8006574 <UART_SetConfig+0x204>
 800655c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006560:	d811      	bhi.n	8006586 <UART_SetConfig+0x216>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <UART_SetConfig+0x1fe>
 8006566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656a:	d006      	beq.n	800657a <UART_SetConfig+0x20a>
 800656c:	e00b      	b.n	8006586 <UART_SetConfig+0x216>
 800656e:	2300      	movs	r3, #0
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e0a1      	b.n	80066b8 <UART_SetConfig+0x348>
 8006574:	2302      	movs	r3, #2
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e09e      	b.n	80066b8 <UART_SetConfig+0x348>
 800657a:	2304      	movs	r3, #4
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	e09b      	b.n	80066b8 <UART_SetConfig+0x348>
 8006580:	2308      	movs	r3, #8
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	e098      	b.n	80066b8 <UART_SetConfig+0x348>
 8006586:	2310      	movs	r3, #16
 8006588:	77fb      	strb	r3, [r7, #31]
 800658a:	e095      	b.n	80066b8 <UART_SetConfig+0x348>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a2f      	ldr	r2, [pc, #188]	; (8006650 <UART_SetConfig+0x2e0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d125      	bne.n	80065e2 <UART_SetConfig+0x272>
 8006596:	4b29      	ldr	r3, [pc, #164]	; (800663c <UART_SetConfig+0x2cc>)
 8006598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065a4:	d017      	beq.n	80065d6 <UART_SetConfig+0x266>
 80065a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065aa:	d817      	bhi.n	80065dc <UART_SetConfig+0x26c>
 80065ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b0:	d00b      	beq.n	80065ca <UART_SetConfig+0x25a>
 80065b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b6:	d811      	bhi.n	80065dc <UART_SetConfig+0x26c>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <UART_SetConfig+0x254>
 80065bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c0:	d006      	beq.n	80065d0 <UART_SetConfig+0x260>
 80065c2:	e00b      	b.n	80065dc <UART_SetConfig+0x26c>
 80065c4:	2301      	movs	r3, #1
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e076      	b.n	80066b8 <UART_SetConfig+0x348>
 80065ca:	2302      	movs	r3, #2
 80065cc:	77fb      	strb	r3, [r7, #31]
 80065ce:	e073      	b.n	80066b8 <UART_SetConfig+0x348>
 80065d0:	2304      	movs	r3, #4
 80065d2:	77fb      	strb	r3, [r7, #31]
 80065d4:	e070      	b.n	80066b8 <UART_SetConfig+0x348>
 80065d6:	2308      	movs	r3, #8
 80065d8:	77fb      	strb	r3, [r7, #31]
 80065da:	e06d      	b.n	80066b8 <UART_SetConfig+0x348>
 80065dc:	2310      	movs	r3, #16
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e06a      	b.n	80066b8 <UART_SetConfig+0x348>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <UART_SetConfig+0x2e4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d138      	bne.n	800665e <UART_SetConfig+0x2ee>
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <UART_SetConfig+0x2cc>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065fa:	d017      	beq.n	800662c <UART_SetConfig+0x2bc>
 80065fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006600:	d82a      	bhi.n	8006658 <UART_SetConfig+0x2e8>
 8006602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006606:	d00b      	beq.n	8006620 <UART_SetConfig+0x2b0>
 8006608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660c:	d824      	bhi.n	8006658 <UART_SetConfig+0x2e8>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <UART_SetConfig+0x2aa>
 8006612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006616:	d006      	beq.n	8006626 <UART_SetConfig+0x2b6>
 8006618:	e01e      	b.n	8006658 <UART_SetConfig+0x2e8>
 800661a:	2300      	movs	r3, #0
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e04b      	b.n	80066b8 <UART_SetConfig+0x348>
 8006620:	2302      	movs	r3, #2
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e048      	b.n	80066b8 <UART_SetConfig+0x348>
 8006626:	2304      	movs	r3, #4
 8006628:	77fb      	strb	r3, [r7, #31]
 800662a:	e045      	b.n	80066b8 <UART_SetConfig+0x348>
 800662c:	2308      	movs	r3, #8
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e042      	b.n	80066b8 <UART_SetConfig+0x348>
 8006632:	bf00      	nop
 8006634:	efff69f3 	.word	0xefff69f3
 8006638:	40011000 	.word	0x40011000
 800663c:	40023800 	.word	0x40023800
 8006640:	40004400 	.word	0x40004400
 8006644:	40004800 	.word	0x40004800
 8006648:	40004c00 	.word	0x40004c00
 800664c:	40005000 	.word	0x40005000
 8006650:	40011400 	.word	0x40011400
 8006654:	40007800 	.word	0x40007800
 8006658:	2310      	movs	r3, #16
 800665a:	77fb      	strb	r3, [r7, #31]
 800665c:	e02c      	b.n	80066b8 <UART_SetConfig+0x348>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a72      	ldr	r2, [pc, #456]	; (800682c <UART_SetConfig+0x4bc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d125      	bne.n	80066b4 <UART_SetConfig+0x344>
 8006668:	4b71      	ldr	r3, [pc, #452]	; (8006830 <UART_SetConfig+0x4c0>)
 800666a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006672:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006676:	d017      	beq.n	80066a8 <UART_SetConfig+0x338>
 8006678:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800667c:	d817      	bhi.n	80066ae <UART_SetConfig+0x33e>
 800667e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006682:	d00b      	beq.n	800669c <UART_SetConfig+0x32c>
 8006684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006688:	d811      	bhi.n	80066ae <UART_SetConfig+0x33e>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <UART_SetConfig+0x326>
 800668e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006692:	d006      	beq.n	80066a2 <UART_SetConfig+0x332>
 8006694:	e00b      	b.n	80066ae <UART_SetConfig+0x33e>
 8006696:	2300      	movs	r3, #0
 8006698:	77fb      	strb	r3, [r7, #31]
 800669a:	e00d      	b.n	80066b8 <UART_SetConfig+0x348>
 800669c:	2302      	movs	r3, #2
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e00a      	b.n	80066b8 <UART_SetConfig+0x348>
 80066a2:	2304      	movs	r3, #4
 80066a4:	77fb      	strb	r3, [r7, #31]
 80066a6:	e007      	b.n	80066b8 <UART_SetConfig+0x348>
 80066a8:	2308      	movs	r3, #8
 80066aa:	77fb      	strb	r3, [r7, #31]
 80066ac:	e004      	b.n	80066b8 <UART_SetConfig+0x348>
 80066ae:	2310      	movs	r3, #16
 80066b0:	77fb      	strb	r3, [r7, #31]
 80066b2:	e001      	b.n	80066b8 <UART_SetConfig+0x348>
 80066b4:	2310      	movs	r3, #16
 80066b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c0:	d15b      	bne.n	800677a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80066c2:	7ffb      	ldrb	r3, [r7, #31]
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d828      	bhi.n	800671a <UART_SetConfig+0x3aa>
 80066c8:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <UART_SetConfig+0x360>)
 80066ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ce:	bf00      	nop
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	080066fd 	.word	0x080066fd
 80066d8:	08006705 	.word	0x08006705
 80066dc:	0800671b 	.word	0x0800671b
 80066e0:	0800670b 	.word	0x0800670b
 80066e4:	0800671b 	.word	0x0800671b
 80066e8:	0800671b 	.word	0x0800671b
 80066ec:	0800671b 	.word	0x0800671b
 80066f0:	08006713 	.word	0x08006713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f4:	f7fd fdd0 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 80066f8:	61b8      	str	r0, [r7, #24]
        break;
 80066fa:	e013      	b.n	8006724 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066fc:	f7fd fde0 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 8006700:	61b8      	str	r0, [r7, #24]
        break;
 8006702:	e00f      	b.n	8006724 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006704:	4b4b      	ldr	r3, [pc, #300]	; (8006834 <UART_SetConfig+0x4c4>)
 8006706:	61bb      	str	r3, [r7, #24]
        break;
 8006708:	e00c      	b.n	8006724 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800670a:	f7fd fcb3 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 800670e:	61b8      	str	r0, [r7, #24]
        break;
 8006710:	e008      	b.n	8006724 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006716:	61bb      	str	r3, [r7, #24]
        break;
 8006718:	e004      	b.n	8006724 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	77bb      	strb	r3, [r7, #30]
        break;
 8006722:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d074      	beq.n	8006814 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	005a      	lsls	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	085b      	lsrs	r3, r3, #1
 8006734:	441a      	add	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b0f      	cmp	r3, #15
 8006744:	d916      	bls.n	8006774 <UART_SetConfig+0x404>
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800674c:	d212      	bcs.n	8006774 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	b29b      	uxth	r3, r3
 8006752:	f023 030f 	bic.w	r3, r3, #15
 8006756:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	085b      	lsrs	r3, r3, #1
 800675c:	b29b      	uxth	r3, r3
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	b29a      	uxth	r2, r3
 8006764:	89fb      	ldrh	r3, [r7, #14]
 8006766:	4313      	orrs	r3, r2
 8006768:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	89fa      	ldrh	r2, [r7, #14]
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	e04f      	b.n	8006814 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	77bb      	strb	r3, [r7, #30]
 8006778:	e04c      	b.n	8006814 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800677a:	7ffb      	ldrb	r3, [r7, #31]
 800677c:	2b08      	cmp	r3, #8
 800677e:	d828      	bhi.n	80067d2 <UART_SetConfig+0x462>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <UART_SetConfig+0x418>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067ad 	.word	0x080067ad
 800678c:	080067b5 	.word	0x080067b5
 8006790:	080067bd 	.word	0x080067bd
 8006794:	080067d3 	.word	0x080067d3
 8006798:	080067c3 	.word	0x080067c3
 800679c:	080067d3 	.word	0x080067d3
 80067a0:	080067d3 	.word	0x080067d3
 80067a4:	080067d3 	.word	0x080067d3
 80067a8:	080067cb 	.word	0x080067cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ac:	f7fd fd74 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 80067b0:	61b8      	str	r0, [r7, #24]
        break;
 80067b2:	e013      	b.n	80067dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b4:	f7fd fd84 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 80067b8:	61b8      	str	r0, [r7, #24]
        break;
 80067ba:	e00f      	b.n	80067dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067bc:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <UART_SetConfig+0x4c4>)
 80067be:	61bb      	str	r3, [r7, #24]
        break;
 80067c0:	e00c      	b.n	80067dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067c2:	f7fd fc57 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 80067c6:	61b8      	str	r0, [r7, #24]
        break;
 80067c8:	e008      	b.n	80067dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ce:	61bb      	str	r3, [r7, #24]
        break;
 80067d0:	e004      	b.n	80067dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	77bb      	strb	r3, [r7, #30]
        break;
 80067da:	bf00      	nop
    }

    if (pclk != 0U)
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d018      	beq.n	8006814 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	085a      	lsrs	r2, r3, #1
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	441a      	add	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b0f      	cmp	r3, #15
 80067fa:	d909      	bls.n	8006810 <UART_SetConfig+0x4a0>
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006802:	d205      	bcs.n	8006810 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	b29a      	uxth	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	e001      	b.n	8006814 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006820:	7fbb      	ldrb	r3, [r7, #30]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40007c00 	.word	0x40007c00
 8006830:	40023800 	.word	0x40023800
 8006834:	00f42400 	.word	0x00f42400

08006838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01a      	beq.n	800694e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006936:	d10a      	bne.n	800694e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	605a      	str	r2, [r3, #4]
  }
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af02      	add	r7, sp, #8
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800698c:	f7fc f820 	bl	80029d0 <HAL_GetTick>
 8006990:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b08      	cmp	r3, #8
 800699e:	d10e      	bne.n	80069be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f831 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e027      	b.n	8006a0e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d10e      	bne.n	80069ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f81b 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e011      	b.n	8006a0e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b09c      	sub	sp, #112	; 0x70
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a26:	e0a7      	b.n	8006b78 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a2e:	f000 80a3 	beq.w	8006b78 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a32:	f7fb ffcd 	bl	80029d0 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d13f      	bne.n	8006ac8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e6      	bne.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	663b      	str	r3, [r7, #96]	; 0x60
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e5      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e068      	b.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d050      	beq.n	8006b78 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae4:	d148      	bne.n	8006b78 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e6      	bne.n	8006af0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3308      	adds	r3, #8
 8006b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	613b      	str	r3, [r7, #16]
   return(result);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b42:	623a      	str	r2, [r7, #32]
 8006b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	69f9      	ldr	r1, [r7, #28]
 8006b48:	6a3a      	ldr	r2, [r7, #32]
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e5      	bne.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e010      	b.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	69da      	ldr	r2, [r3, #28]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	4013      	ands	r3, r2
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	bf0c      	ite	eq
 8006b88:	2301      	moveq	r3, #1
 8006b8a:	2300      	movne	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	f43f af48 	beq.w	8006a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3770      	adds	r7, #112	; 0x70
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	f107 001c 	add.w	r0, r7, #28
 8006bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d120      	bne.n	8006bfe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	4b20      	ldr	r3, [pc, #128]	; (8006c50 <USB_CoreInit+0xac>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d105      	bne.n	8006bf2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fa96 	bl	8007124 <USB_CoreReset>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73fb      	strb	r3, [r7, #15]
 8006bfc:	e010      	b.n	8006c20 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fa8a 	bl	8007124 <USB_CoreReset>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10b      	bne.n	8006c3e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f043 0206 	orr.w	r2, r3, #6
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f043 0220 	orr.w	r2, r3, #32
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c4a:	b004      	add	sp, #16
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	ffbdffbf 	.word	0xffbdffbf

08006c54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f023 0201 	bic.w	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c92:	78fb      	ldrb	r3, [r7, #3]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d115      	bne.n	8006cc4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ca4:	2001      	movs	r0, #1
 8006ca6:	f7fb fe9f 	bl	80029e8 <HAL_Delay>
      ms++;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3301      	adds	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fa29 	bl	8007108 <USB_GetMode>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d01e      	beq.n	8006cfa <USB_SetCurrentMode+0x84>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b31      	cmp	r3, #49	; 0x31
 8006cc0:	d9f0      	bls.n	8006ca4 <USB_SetCurrentMode+0x2e>
 8006cc2:	e01a      	b.n	8006cfa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cc4:	78fb      	ldrb	r3, [r7, #3]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d115      	bne.n	8006cf6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cd6:	2001      	movs	r0, #1
 8006cd8:	f7fb fe86 	bl	80029e8 <HAL_Delay>
      ms++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fa10 	bl	8007108 <USB_GetMode>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <USB_SetCurrentMode+0x84>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b31      	cmp	r3, #49	; 0x31
 8006cf2:	d9f0      	bls.n	8006cd6 <USB_SetCurrentMode+0x60>
 8006cf4:	e001      	b.n	8006cfa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e005      	b.n	8006d06 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b32      	cmp	r3, #50	; 0x32
 8006cfe:	d101      	bne.n	8006d04 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e000      	b.n	8006d06 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d10:	b084      	sub	sp, #16
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	e009      	b.n	8006d44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	3340      	adds	r3, #64	; 0x40
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	3301      	adds	r3, #1
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b0e      	cmp	r3, #14
 8006d48:	d9f2      	bls.n	8006d30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d11c      	bne.n	8006d8a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e005      	b.n	8006d96 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	2300      	movs	r3, #0
 8006da0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da8:	4619      	mov	r1, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db0:	461a      	mov	r2, r3
 8006db2:	680b      	ldr	r3, [r1, #0]
 8006db4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d10c      	bne.n	8006dd6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d104      	bne.n	8006dcc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f965 	bl	8007094 <USB_SetDevSpeed>
 8006dca:	e008      	b.n	8006dde <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006dcc:	2101      	movs	r1, #1
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f960 	bl	8007094 <USB_SetDevSpeed>
 8006dd4:	e003      	b.n	8006dde <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006dd6:	2103      	movs	r1, #3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f95b 	bl	8007094 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dde:	2110      	movs	r1, #16
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f8f3 	bl	8006fcc <USB_FlushTxFifo>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f91f 	bl	8007034 <USB_FlushRxFifo>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e06:	461a      	mov	r2, r3
 8006e08:	2300      	movs	r3, #0
 8006e0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e12:	461a      	mov	r2, r3
 8006e14:	2300      	movs	r3, #0
 8006e16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1e:	461a      	mov	r2, r3
 8006e20:	2300      	movs	r3, #0
 8006e22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e24:	2300      	movs	r3, #0
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	e043      	b.n	8006eb2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e40:	d118      	bne.n	8006e74 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e54:	461a      	mov	r2, r3
 8006e56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	e013      	b.n	8006e86 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	e008      	b.n	8006e86 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e80:	461a      	mov	r2, r3
 8006e82:	2300      	movs	r3, #0
 8006e84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e92:	461a      	mov	r2, r3
 8006e94:	2300      	movs	r3, #0
 8006e96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d3b7      	bcc.n	8006e2a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
 8006ebe:	e043      	b.n	8006f48 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ed6:	d118      	bne.n	8006f0a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	461a      	mov	r2, r3
 8006eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	e013      	b.n	8006f1c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f00:	461a      	mov	r2, r3
 8006f02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	e008      	b.n	8006f1c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f16:	461a      	mov	r2, r3
 8006f18:	2300      	movs	r3, #0
 8006f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	461a      	mov	r2, r3
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3301      	adds	r3, #1
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d3b7      	bcc.n	8006ec0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d105      	bne.n	8006f84 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	f043 0210 	orr.w	r2, r3, #16
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <USB_DevInit+0x2b4>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d005      	beq.n	8006fa2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	f043 0208 	orr.w	r2, r3, #8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d105      	bne.n	8006fb4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <USB_DevInit+0x2b8>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fc0:	b004      	add	sp, #16
 8006fc2:	4770      	bx	lr
 8006fc4:	803c3800 	.word	0x803c3800
 8006fc8:	40000004 	.word	0x40000004

08006fcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4a13      	ldr	r2, [pc, #76]	; (8007030 <USB_FlushTxFifo+0x64>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d901      	bls.n	8006fec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e01b      	b.n	8007024 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	daf2      	bge.n	8006fda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	019b      	lsls	r3, r3, #6
 8006ffc:	f043 0220 	orr.w	r2, r3, #32
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3301      	adds	r3, #1
 8007008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4a08      	ldr	r2, [pc, #32]	; (8007030 <USB_FlushTxFifo+0x64>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d901      	bls.n	8007016 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e006      	b.n	8007024 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b20      	cmp	r3, #32
 8007020:	d0f0      	beq.n	8007004 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	00030d40 	.word	0x00030d40

08007034 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3301      	adds	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4a11      	ldr	r2, [pc, #68]	; (8007090 <USB_FlushRxFifo+0x5c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e018      	b.n	8007084 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	daf2      	bge.n	8007040 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2210      	movs	r2, #16
 8007062:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3301      	adds	r3, #1
 8007068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a08      	ldr	r2, [pc, #32]	; (8007090 <USB_FlushRxFifo+0x5c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d901      	bls.n	8007076 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e006      	b.n	8007084 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0310 	and.w	r3, r3, #16
 800707e:	2b10      	cmp	r3, #16
 8007080:	d0f0      	beq.n	8007064 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	00030d40 	.word	0x00030d40

08007094 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	68f9      	ldr	r1, [r7, #12]
 80070b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070b4:	4313      	orrs	r3, r2
 80070b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070e0:	f023 0303 	bic.w	r3, r3, #3
 80070e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070f4:	f043 0302 	orr.w	r3, r3, #2
 80070f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	f003 0301 	and.w	r3, r3, #1
}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4a13      	ldr	r2, [pc, #76]	; (8007188 <USB_CoreReset+0x64>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d901      	bls.n	8007142 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e01b      	b.n	800717a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	daf2      	bge.n	8007130 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f043 0201 	orr.w	r2, r3, #1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3301      	adds	r3, #1
 800715e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4a09      	ldr	r2, [pc, #36]	; (8007188 <USB_CoreReset+0x64>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d901      	bls.n	800716c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e006      	b.n	800717a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b01      	cmp	r3, #1
 8007176:	d0f0      	beq.n	800715a <USB_CoreReset+0x36>

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	00030d40 	.word	0x00030d40

0800718c <__libc_init_array>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	4d0d      	ldr	r5, [pc, #52]	; (80071c4 <__libc_init_array+0x38>)
 8007190:	4c0d      	ldr	r4, [pc, #52]	; (80071c8 <__libc_init_array+0x3c>)
 8007192:	1b64      	subs	r4, r4, r5
 8007194:	10a4      	asrs	r4, r4, #2
 8007196:	2600      	movs	r6, #0
 8007198:	42a6      	cmp	r6, r4
 800719a:	d109      	bne.n	80071b0 <__libc_init_array+0x24>
 800719c:	4d0b      	ldr	r5, [pc, #44]	; (80071cc <__libc_init_array+0x40>)
 800719e:	4c0c      	ldr	r4, [pc, #48]	; (80071d0 <__libc_init_array+0x44>)
 80071a0:	f000 f820 	bl	80071e4 <_init>
 80071a4:	1b64      	subs	r4, r4, r5
 80071a6:	10a4      	asrs	r4, r4, #2
 80071a8:	2600      	movs	r6, #0
 80071aa:	42a6      	cmp	r6, r4
 80071ac:	d105      	bne.n	80071ba <__libc_init_array+0x2e>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b4:	4798      	blx	r3
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7ee      	b.n	8007198 <__libc_init_array+0xc>
 80071ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80071be:	4798      	blx	r3
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7f2      	b.n	80071aa <__libc_init_array+0x1e>
 80071c4:	0800721c 	.word	0x0800721c
 80071c8:	0800721c 	.word	0x0800721c
 80071cc:	0800721c 	.word	0x0800721c
 80071d0:	08007220 	.word	0x08007220

080071d4 <memset>:
 80071d4:	4402      	add	r2, r0
 80071d6:	4603      	mov	r3, r0
 80071d8:	4293      	cmp	r3, r2
 80071da:	d100      	bne.n	80071de <memset+0xa>
 80071dc:	4770      	bx	lr
 80071de:	f803 1b01 	strb.w	r1, [r3], #1
 80071e2:	e7f9      	b.n	80071d8 <memset+0x4>

080071e4 <_init>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	bf00      	nop
 80071e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ea:	bc08      	pop	{r3}
 80071ec:	469e      	mov	lr, r3
 80071ee:	4770      	bx	lr

080071f0 <_fini>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr
